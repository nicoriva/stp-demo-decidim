{"ast":null,"code":"/* eslint-disable require-jsdoc */\n\n// If you want to customize the geocoder address format which is displayed\n// when showing the geocoding results list, add this configuration code to\n// your geocoder at config/initializers/decidim.rb:\n// config.maps = {\n//   # ... other configs ...\n//   autocomplete: {\n//     address_format: [%w(street houseNumber), \"city\", \"country\"]\n//   }\n// }\n//\n// For the available address keys, refer to the provider's own documentation.\nvar compact = function compact(items) {\n  return items.filter(function (part) {\n    return part !== null && typeof part !== \"undefined\" && \"\".concat(part).trim().length > 0;\n  });\n};\nexport default function formatAddress(object, keys) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \", \";\n  var parts = keys.map(function (key) {\n    if (Array.isArray(key)) {\n      return formatAddress(object, key, \" \");\n    }\n    return object[key] || object[key.toLowerCase()];\n  });\n  return compact(parts).join(separator).trim();\n}","map":{"version":3,"names":["compact","items","filter","part","concat","trim","length","formatAddress","object","keys","separator","arguments","undefined","parts","map","key","Array","isArray","toLowerCase","join"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/geocoding/format_address.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\n// If you want to customize the geocoder address format which is displayed\n// when showing the geocoding results list, add this configuration code to\n// your geocoder at config/initializers/decidim.rb:\n// config.maps = {\n//   # ... other configs ...\n//   autocomplete: {\n//     address_format: [%w(street houseNumber), \"city\", \"country\"]\n//   }\n// }\n//\n// For the available address keys, refer to the provider's own documentation.\nconst compact = (items) => items.filter(\n  (part) => part !== null && typeof part !== \"undefined\" && `${part}`.trim().length > 0\n);\n\nexport default function formatAddress(object, keys, separator = \", \") {\n  const parts = keys.map((key) => {\n    if (Array.isArray(key)) {\n      return formatAddress(object, key, \" \");\n    }\n    return object[key] || object[key.toLowerCase()];\n  })\n\n  return compact(parts).join(separator).trim();\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAK;EAAA,OAAKA,KAAK,CAACC,MAAM,CACrC,UAACC,IAAI;IAAA,OAAKA,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,WAAW,IAAI,GAAAC,MAAA,CAAGD,IAAI,EAAGE,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC;EAAA,CACvF,CAAC;AAAA;AAED,eAAe,SAASC,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAoB;EAAA,IAAlBC,SAAS,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;EAClE,IAAME,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAAC,UAACC,GAAG,EAAK;IAC9B,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;MACtB,OAAOR,aAAa,CAACC,MAAM,EAAEO,GAAG,EAAE,GAAG,CAAC;IACxC;IACA,OAAOP,MAAM,CAACO,GAAG,CAAC,IAAIP,MAAM,CAACO,GAAG,CAACG,WAAW,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC;EAEF,OAAOlB,OAAO,CAACa,KAAK,CAAC,CAACM,IAAI,CAACT,SAAS,CAAC,CAACL,IAAI,CAAC,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}