{"ast":null,"code":"import MapMarkersController from \"src/decidim/map/controller/markers\";\nimport MapStaticController from \"src/decidim/map/controller/static\";\nimport MapDragMarkerController from \"src/decidim/map/controller/drag_marker\";\n\n/**\n * A factory method that creates a new map controller instance. This method\n * can be overridden in order to return different types of maps for\n * differently configured map elements.\n *\n * For instance, one map could pass an extra `type` configuration with the\n * value \"custom\" for the map element, this factory method would identify\n * it and then return a different controller for that map than the default.\n * This would allow this types of maps to function differently.\n *\n * An example how to use in the ERB view:\n *   <%= dynamic_map_for type: \"custom\" do %>\n *     <%= javascript_pack_tag \"map_customization\" %>\n *   <% end %>\n *\n * And then the actual customization at `map_customization.js.es6`:\n *   var originalCreateMapController = window.Decidim.createMapController;\n *   window.Decidim.createMapController = (mapId, config) => {\n *     if (config.type === \"custom\") {\n *       // Obviously you need to implement CustomMapController for this to\n *       // work.\n *       return new window.Decidim.CustomMapController(mapId, config);\n *     }\n *\n *     return originalCreateMapController(mapId, config);\n *   }\n *\n * @param {string} mapId The ID of the map element.\n * @param {Object} config The map configuration object.\n * @returns {MapController} The controller for the map.\n */\nvar createMapController = function createMapController(mapId, config) {\n  if (config.type === \"static\") {\n    return new MapStaticController(mapId, config);\n  } else if (config.type === \"drag-marker\") {\n    return new MapDragMarkerController(mapId, config);\n  }\n  return new MapMarkersController(mapId, config);\n};\nwindow.Decidim.createMapController = createMapController;","map":{"version":3,"names":["MapMarkersController","MapStaticController","MapDragMarkerController","createMapController","mapId","config","type","window","Decidim"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/map/factory.js"],"sourcesContent":["import MapMarkersController from \"src/decidim/map/controller/markers\"\nimport MapStaticController from \"src/decidim/map/controller/static\"\nimport MapDragMarkerController from \"src/decidim/map/controller/drag_marker\"\n\n/**\n * A factory method that creates a new map controller instance. This method\n * can be overridden in order to return different types of maps for\n * differently configured map elements.\n *\n * For instance, one map could pass an extra `type` configuration with the\n * value \"custom\" for the map element, this factory method would identify\n * it and then return a different controller for that map than the default.\n * This would allow this types of maps to function differently.\n *\n * An example how to use in the ERB view:\n *   <%= dynamic_map_for type: \"custom\" do %>\n *     <%= javascript_pack_tag \"map_customization\" %>\n *   <% end %>\n *\n * And then the actual customization at `map_customization.js.es6`:\n *   var originalCreateMapController = window.Decidim.createMapController;\n *   window.Decidim.createMapController = (mapId, config) => {\n *     if (config.type === \"custom\") {\n *       // Obviously you need to implement CustomMapController for this to\n *       // work.\n *       return new window.Decidim.CustomMapController(mapId, config);\n *     }\n *\n *     return originalCreateMapController(mapId, config);\n *   }\n *\n * @param {string} mapId The ID of the map element.\n * @param {Object} config The map configuration object.\n * @returns {MapController} The controller for the map.\n */\nconst createMapController = function(mapId, config) {\n  if (config.type === \"static\") {\n    return new MapStaticController(mapId, config);\n  } else if (config.type === \"drag-marker\") {\n    return new MapDragMarkerController(mapId, config);\n  }\n\n  return new MapMarkersController(mapId, config);\n}\n\nwindow.Decidim.createMapController = createMapController;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,oCAAoC;AACrE,OAAOC,mBAAmB,MAAM,mCAAmC;AACnE,OAAOC,uBAAuB,MAAM,wCAAwC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAYC,KAAK,EAAEC,MAAM,EAAE;EAClD,IAAIA,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,IAAIL,mBAAmB,CAACG,KAAK,EAAEC,MAAM,CAAC;EAC/C,CAAC,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;IACxC,OAAO,IAAIJ,uBAAuB,CAACE,KAAK,EAAEC,MAAM,CAAC;EACnD;EAEA,OAAO,IAAIL,oBAAoB,CAACI,KAAK,EAAEC,MAAM,CAAC;AAChD,CAAC;AAEDE,MAAM,CAACC,OAAO,CAACL,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}