{"ast":null,"code":"$(function () {\n  var $form = $(\".form.newsletter_deliver\");\n  if ($form.length > 0) {\n    var $sendNewsletterToAllUsers = $form.find(\"#send_newsletter_to_all_users\");\n    var $sendNewsletterToFollowers = $form.find(\"#send_newsletter_to_followers\");\n    var $sendNewsletterToParticipants = $form.find(\"#send_newsletter_to_participants\");\n    var $participatorySpacesForSelect = $form.find(\"#participatory_spaces_for_select\");\n    var checkSelectiveNewsletterFollowers = $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\");\n    var checkSelectiveNewsletterParticipants = $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\");\n    $sendNewsletterToAllUsers.on(\"change\", function (event) {\n      var checked = event.target.checked;\n      if (checked) {\n        $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.hide();\n      } else {\n        $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      }\n    });\n    $sendNewsletterToFollowers.on(\"change\", function (event) {\n      var checked = event.target.checked;\n      var selectiveNewsletterParticipants = $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\");\n      if (checked) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      } else if (!selectiveNewsletterParticipants) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", true);\n        $participatorySpacesForSelect.hide();\n      }\n    });\n    $sendNewsletterToParticipants.on(\"change\", function (event) {\n      var checked = event.target.checked;\n      var selectiveNewsletterFollowers = $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\");\n      if (checked) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      } else if (!selectiveNewsletterFollowers) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", true);\n        $participatorySpacesForSelect.hide();\n      }\n    });\n    if (checkSelectiveNewsletterFollowers || checkSelectiveNewsletterParticipants) {\n      $participatorySpacesForSelect.show();\n    } else {\n      $participatorySpacesForSelect.hide();\n    }\n    $(\".form .spaces-block-tag\").each(function (_i, blockTag) {\n      var selectTag = $(blockTag).find(\".chosen-select\");\n      selectTag.change(function () {\n        var optionSelected = selectTag.find(\"option:selected\").val();\n        if (optionSelected === \"all\") {\n          selectTag.find(\"option\").not(\":first\").prop(\"selected\", true);\n          selectTag.find(\"option[value='all']\").prop(\"selected\", false);\n        } else if (optionSelected === \"\") {\n          selectTag.find(\"option\").not(\":first\").prop(\"selected\", false);\n        }\n      });\n    });\n    $form.on(\"change\", function () {\n      var $data = $form.serializeJSON().newsletter;\n      var $url = $form.data(\"recipients-count-newsletter-path\");\n      var $modal = $(\"#recipients_count_spinner\");\n      $modal.removeClass(\"hide\");\n      $.get($url, {\n        data: $data\n      }, function (recipientsCount) {\n        $(\"#recipients_count\").text(recipientsCount);\n      }).always(function () {\n        $modal.addClass(\"hide\");\n      });\n    });\n  }\n});","map":{"version":3,"names":["$","$form","length","$sendNewsletterToAllUsers","find","$sendNewsletterToFollowers","$sendNewsletterToParticipants","$participatorySpacesForSelect","checkSelectiveNewsletterFollowers","prop","checkSelectiveNewsletterParticipants","on","event","checked","target","hide","show","selectiveNewsletterParticipants","selectiveNewsletterFollowers","each","_i","blockTag","selectTag","change","optionSelected","val","not","$data","serializeJSON","newsletter","$url","data","$modal","removeClass","get","recipientsCount","text","always","addClass"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-admin-0.27.3/app/packs/src/decidim/admin/newsletters.js"],"sourcesContent":["$(() => {\n  const $form = $(\".form.newsletter_deliver\");\n\n  if ($form.length > 0) {\n    const $sendNewsletterToAllUsers = $form.find(\"#send_newsletter_to_all_users\");\n    const $sendNewsletterToFollowers = $form.find(\"#send_newsletter_to_followers\");\n    const $sendNewsletterToParticipants = $form.find(\"#send_newsletter_to_participants\");\n    const $participatorySpacesForSelect = $form.find(\"#participatory_spaces_for_select\");\n\n    const checkSelectiveNewsletterFollowers = $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\");\n    const checkSelectiveNewsletterParticipants = $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\");\n\n    $sendNewsletterToAllUsers.on(\"change\", (event) => {\n      const checked = event.target.checked;\n      if (checked) {\n        $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.hide();\n      } else {\n        $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      }\n    })\n\n    $sendNewsletterToFollowers.on(\"change\", (event) => {\n      const checked = event.target.checked;\n      const selectiveNewsletterParticipants = $sendNewsletterToParticipants.find(\"input[type='checkbox']\").prop(\"checked\");\n\n      if (checked) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      } else if (!selectiveNewsletterParticipants) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", true);\n        $participatorySpacesForSelect.hide();\n      }\n    })\n\n    $sendNewsletterToParticipants.on(\"change\", (event) => {\n      const checked = event.target.checked;\n      const selectiveNewsletterFollowers = $sendNewsletterToFollowers.find(\"input[type='checkbox']\").prop(\"checked\");\n      if (checked) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", !checked);\n        $participatorySpacesForSelect.show();\n      } else if (!selectiveNewsletterFollowers) {\n        $sendNewsletterToAllUsers.find(\"input[type='checkbox']\").prop(\"checked\", true);\n        $participatorySpacesForSelect.hide();\n      }\n    })\n\n    if (checkSelectiveNewsletterFollowers || checkSelectiveNewsletterParticipants) {\n      $participatorySpacesForSelect.show();\n    } else {\n      $participatorySpacesForSelect.hide();\n    }\n\n    $(\".form .spaces-block-tag\").each(function(_i, blockTag) {\n      const selectTag = $(blockTag).find(\".chosen-select\")\n      selectTag.change(function() {\n        let optionSelected = selectTag.find(\"option:selected\").val()\n        if (optionSelected === \"all\") {\n          selectTag.find(\"option\").not(\":first\").prop(\"selected\", true);\n          selectTag.find(\"option[value='all']\").prop(\"selected\", false);\n        } else if (optionSelected === \"\") {\n          selectTag.find(\"option\").not(\":first\").prop(\"selected\", false);\n        }\n      });\n    })\n\n    $form.on(\"change\", function() {\n      let $data = $form.serializeJSON().newsletter;\n      let $url = $form.data(\"recipients-count-newsletter-path\");\n      const $modal = $(\"#recipients_count_spinner\");\n      $modal.removeClass(\"hide\");\n      $.get($url, {data: $data}, function(recipientsCount) {\n        $(\"#recipients_count\").text(recipientsCount);\n      }).always(function() {\n        $modal.addClass(\"hide\");\n      });\n    })\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}