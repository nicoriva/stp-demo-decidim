{"ast":null,"code":"/* eslint-disable require-jsdoc */\n\nimport \"entrypoints/decidim_api_graphiql.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GraphiQL from \"graphiql\";\nimport Configuration from \"src/decidim/configuration\";\nwindow.Decidim = window.Decidim || {};\nwindow.Decidim.config = new Configuration();\nvar parameters = {};\n\n// Parse the search string to get url parameters.\nvar search = window.location.search;\nsearch.substr(1).split(\"&\").forEach(function (entry) {\n  var eq = entry.indexOf(\"=\");\n  if (eq >= 0) {\n    parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1));\n  }\n});\n// if variables was provided, try to format it.\nif (parameters.variables) {\n  try {\n    parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2);\n  } catch (error) {\n    // Do nothing, we want to display the invalid JSON as a string, rather\n    // than present an error.\n  }\n}\nvar updateURL = function updateURL() {\n  var newSearch = Object.keys(parameters).map(function (key) {\n    return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(parameters[key]));\n  }).join(\"&\");\n  history.replaceState(null, null, \"?\".concat(newSearch));\n};\n\n// When the query and variables string is edited, update the URL bar so\n// that it can be easily shared\nvar onEditQuery = function onEditQuery(newQuery) {\n  parameters.query = newQuery;\n  updateURL();\n};\nvar onEditVariables = function onEditVariables(newVariables) {\n  parameters.variables = newVariables;\n  updateURL();\n};\n\n// Defines a GraphQL fetcher using the fetch API.\nvar graphQLFetcher = function graphQLFetcher(graphQLParams) {\n  var graphQLEndpoint = window.Decidim.config.get(\"graphql_endpoint\");\n  return fetch(graphQLEndpoint, {\n    method: \"post\",\n    headers: JSON.parse(window.Decidim.config.get(\"request_headers\")),\n    body: JSON.stringify(graphQLParams),\n    credentials: \"include\"\n  }).then(function (response) {\n    try {\n      return response.json();\n    } catch (error) {\n      return {\n        \"status\": response.status,\n        \"message\": \"The server responded with invalid JSON, this is probably a server-side error\",\n        \"response\": response.text()\n      };\n    }\n  });\n};\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n  // Render <GraphiQL /> into the body.\n  ReactDOM.render( /*#__PURE__*/React.createElement(GraphiQL, {\n    fetcher: graphQLFetcher,\n    defaultQuery: window.Decidim.config.get(\"default_query\"),\n    query: parameters.query,\n    variables: parameters.variables,\n    onEditQuery: onEditQuery,\n    onEditVariables: onEditVariables\n  }), document.getElementById(\"graphiql-container\"));\n});","map":{"version":3,"names":["React","ReactDOM","GraphiQL","Configuration","window","Decidim","config","parameters","search","location","substr","split","forEach","entry","eq","indexOf","decodeURIComponent","slice","variables","JSON","stringify","parse","error","updateURL","newSearch","Object","keys","map","key","concat","encodeURIComponent","join","history","replaceState","onEditQuery","newQuery","query","onEditVariables","newVariables","graphQLFetcher","graphQLParams","graphQLEndpoint","get","fetch","method","headers","body","credentials","then","response","json","status","text","addEventListener","render","createElement","fetcher","defaultQuery","document","getElementById"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-api-0.27.3/app/packs/entrypoints/decidim_api_graphiql.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport \"entrypoints/decidim_api_graphiql.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport GraphiQL from \"graphiql\";\nimport Configuration from \"src/decidim/configuration\"\n\nwindow.Decidim = window.Decidim || {};\nwindow.Decidim.config = new Configuration()\n\nlet parameters = {};\n\n// Parse the search string to get url parameters.\nconst search = window.location.search;\nsearch.substr(1).split(\"&\").forEach(function (entry) {\n  let eq = entry.indexOf(\"=\");\n  if (eq >= 0) {\n    parameters[decodeURIComponent(entry.slice(0, eq))] =\n      decodeURIComponent(entry.slice(eq + 1));\n  }\n});\n// if variables was provided, try to format it.\nif (parameters.variables) {\n  try {\n    parameters.variables =\n      JSON.stringify(JSON.parse(parameters.variables), null, 2);\n  } catch (error) {\n    // Do nothing, we want to display the invalid JSON as a string, rather\n    // than present an error.\n  }\n}\n\nconst updateURL = function() {\n  const newSearch = Object.keys(parameters).map(function (key) {\n    return `${encodeURIComponent(key)}=${encodeURIComponent(parameters[key])}`;\n  }).join(\"&\");\n\n  history.replaceState(null, null, `?${newSearch}`);\n}\n\n// When the query and variables string is edited, update the URL bar so\n// that it can be easily shared\nconst onEditQuery = function(newQuery) {\n  parameters.query = newQuery;\n  updateURL();\n}\n\nconst onEditVariables = function(newVariables) {\n  parameters.variables = newVariables;\n  updateURL();\n}\n\n// Defines a GraphQL fetcher using the fetch API.\nconst graphQLFetcher = function(graphQLParams) {\n  const graphQLEndpoint = window.Decidim.config.get(\"graphql_endpoint\");\n  return fetch(graphQLEndpoint, {\n    method: \"post\",\n    headers: JSON.parse(window.Decidim.config.get(\"request_headers\")),\n    body: JSON.stringify(graphQLParams),\n    credentials: \"include\"\n  }).then(function(response) {\n    try {\n      return response.json();\n    } catch (error) {\n      return {\n        \"status\": response.status,\n        \"message\": \"The server responded with invalid JSON, this is probably a server-side error\",\n        \"response\": response.text()\n      };\n    }\n  })\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  // Render <GraphiQL /> into the body.\n  ReactDOM.render(\n    React.createElement(GraphiQL, {\n      fetcher: graphQLFetcher,\n      defaultQuery: window.Decidim.config.get(\"default_query\"),\n      query: parameters.query,\n      variables: parameters.variables,\n      onEditQuery: onEditQuery,\n      onEditVariables: onEditVariables\n    }),\n    document.getElementById(\"graphiql-container\")\n  )\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}