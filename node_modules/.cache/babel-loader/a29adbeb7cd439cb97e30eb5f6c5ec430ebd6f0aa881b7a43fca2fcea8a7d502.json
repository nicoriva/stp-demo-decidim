{"ast":null,"code":"import { BlockEmbed } from \"quill/blots/block\";\nvar Delta = Quill[\"import\"](\"delta\");\nvar Parchment = Quill[\"import\"](\"parchment\");\n\n// Newer version used only for the pasting, not compatible with the version of\n// Quill in use.\nvar traverse = function traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {\n  // eslint-disable-line max-params\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce(function (delta, matcher) {\n      return matcher(node, delta, scroll);\n    }, new Delta());\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce(function (delta, childNode) {\n      var childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce(function (reducedDelta, matcher) {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce(function (reducedDelta, matcher) {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n      }\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  }\n  return new Delta();\n};\nvar deltaEndsWith = function deltaEndsWith(delta, text) {\n  var endText = \"\";\n  for (var idx = delta.ops.length - 1; idx >= 0 && endText.length < text.length; idx -= 1) {\n    var op = delta.ops[idx];\n    if (typeof op.insert !== \"string\") {\n      break;\n    }\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n};\nvar isLine = function isLine(node) {\n  if (node.childNodes.length === 0) {\n    // Exclude embed blocks\n    return false;\n  }\n  return [\"address\", \"article\", \"blockquote\", \"canvas\", \"dd\", \"div\", \"dl\", \"dt\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"iframe\", \"li\", \"main\", \"nav\", \"ol\", \"output\", \"p\", \"pre\", \"section\", \"table\", \"td\", \"tr\", \"ul\", \"video\"].includes(node.tagName.toLowerCase());\n};\nvar matchNewLineScroll = function matchNewLineScroll(nextSibling, delta, scroll) {\n  if (!scroll) {\n    return null;\n  }\n  var match = Parchment.query(nextSibling);\n  if (match && match.prototype instanceof BlockEmbed) {\n    return delta.insert(\"\\n\");\n  }\n  return null;\n};\nvar matchNewline = function matchNewline(node, delta, scroll) {\n  if (!deltaEndsWith(delta, \"\\n\")) {\n    // When scroll is defined, it was initiated from the paste event. Otherwise\n    // it is a normal Quill initiated traversal which handles adding the line\n    // breaks already.\n    if (scroll && node.nodeType === node.ELEMENT_NODE && node.tagName === \"BR\") {\n      return delta.insert({\n        \"break\": \"\"\n      });\n    }\n    if (isLine(node)) {\n      return delta.insert(\"\\n\");\n    }\n    if (delta.length() > 0 && node.nextSibling) {\n      var nextSibling = node.nextSibling;\n      while (nextSibling !== null) {\n        if (isLine(nextSibling)) {\n          return delta.insert(\"\\n\");\n        }\n        var scrollMatch = matchNewLineScroll(nextSibling, delta, scroll);\n        if (scrollMatch) {\n          return scrollMatch;\n        }\n        nextSibling = nextSibling.firstChild;\n      }\n    }\n  }\n  return delta;\n};\nvar matchBreak = function matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, \"\\n\")) {\n    delta.insert({\n      \"break\": \"\"\n    });\n  }\n  return delta;\n};\nexport { traverse, deltaEndsWith, isLine, matchNewline, matchBreak };","map":{"version":3,"names":["BlockEmbed","Delta","Quill","Parchment","traverse","scroll","node","elementMatchers","textMatchers","nodeMatches","nodeType","TEXT_NODE","reduce","delta","matcher","ELEMENT_NODE","Array","from","childNodes","childNode","childrenDelta","reducedDelta","get","concat","deltaEndsWith","text","endText","idx","ops","length","op","insert","slice","isLine","includes","tagName","toLowerCase","matchNewLineScroll","nextSibling","match","query","prototype","matchNewline","scrollMatch","firstChild","matchBreak"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/editor/clipboard_utilities.js"],"sourcesContent":["import { BlockEmbed } from \"quill/blots/block\";\n\nconst Delta = Quill.import(\"delta\");\nconst Parchment = Quill.import(\"parchment\");\n\n// Newer version used only for the pasting, not compatible with the version of\n// Quill in use.\nconst traverse = (scroll, node, elementMatchers, textMatchers, nodeMatches) => { // eslint-disable-line max-params\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce((delta, matcher) => {\n      return matcher(node, delta, scroll);\n    }, new Delta());\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce((delta, childNode) => {\n      let childrenDelta = traverse(\n        scroll,\n        childNode,\n        elementMatchers,\n        textMatchers,\n        nodeMatches,\n      );\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce(\n          (reducedDelta, matcher) => {\n            return matcher(childNode, reducedDelta, scroll);\n          },\n          childrenDelta,\n        );\n      }\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  }\n  return new Delta();\n}\n\nconst deltaEndsWith = (delta, text) => {\n  let endText = \"\";\n  for (let idx = delta.ops.length - 1; idx >= 0 && endText.length < text.length; idx -= 1) {\n    const op = delta.ops[idx];\n    if (typeof op.insert !== \"string\") {\n      break;\n    }\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n}\n\nconst isLine = (node) => {\n  if (node.childNodes.length === 0) {\n    // Exclude embed blocks\n    return false;\n  }\n  return [\n    \"address\", \"article\", \"blockquote\", \"canvas\", \"dd\", \"div\", \"dl\", \"dt\",\n    \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\",\n    \"h4\", \"h5\", \"h6\", \"header\", \"iframe\", \"li\", \"main\", \"nav\", \"ol\", \"output\",\n    \"p\", \"pre\", \"section\", \"table\", \"td\", \"tr\", \"ul\", \"video\"\n  ].includes(node.tagName.toLowerCase());\n}\n\nconst matchNewLineScroll = (nextSibling, delta, scroll) => {\n  if (!scroll) {\n    return null;\n  }\n\n  const match = Parchment.query(nextSibling)\n  if (match && match.prototype instanceof BlockEmbed) {\n    return delta.insert(\"\\n\");\n  }\n  return null;\n}\n\nconst matchNewline = (node, delta, scroll) => {\n  if (!deltaEndsWith(delta, \"\\n\")) {\n    // When scroll is defined, it was initiated from the paste event. Otherwise\n    // it is a normal Quill initiated traversal which handles adding the line\n    // breaks already.\n    if (scroll && node.nodeType === node.ELEMENT_NODE && node.tagName === \"BR\") {\n      return delta.insert({\"break\": \"\"});\n    }\n    if (isLine(node)) {\n      return delta.insert(\"\\n\");\n    }\n    if (delta.length() > 0 && node.nextSibling) {\n      let { nextSibling } = node;\n      while (nextSibling !== null) {\n        if (isLine(nextSibling)) {\n          return delta.insert(\"\\n\");\n        }\n        const scrollMatch = matchNewLineScroll(nextSibling, delta, scroll);\n        if (scrollMatch) {\n          return scrollMatch;\n        }\n        nextSibling = nextSibling.firstChild;\n      }\n    }\n  }\n  return delta;\n}\n\nconst matchBreak = (node, delta) => {\n  if (!deltaEndsWith(delta, \"\\n\")) {\n    delta.insert({\"break\": \"\"});\n  }\n  return delta;\n}\n\nexport {\n  traverse,\n  deltaEndsWith,\n  isLine,\n  matchNewline,\n  matchBreak\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}