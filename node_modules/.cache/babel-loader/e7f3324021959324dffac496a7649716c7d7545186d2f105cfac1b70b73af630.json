{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles questions from polls in meetings:\n *   - fetches them via Ajax\n *   - enables a polling to automatically update them\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nvar $ = window.$;\n\n// Default question states\nvar OPEN = \"open\";\nvar CLOSED = \"closed\";\nvar PollComponent = /*#__PURE__*/function () {\n  function PollComponent($element, config) {\n    var $counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, PollComponent);\n    this.$element = $element;\n    this.$counter = $counter;\n    this.questionsUrl = config.questionsUrl;\n    this.pollingInterval = config.pollingInterval || 5000;\n    this.mounted = false;\n    this.questions = {};\n  }\n\n  /**\n   * Returns if the component is mounted or not\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  _createClass(PollComponent, [{\n    key: \"isMounted\",\n    value: function isMounted() {\n      return this.mounted;\n    }\n\n    /**\n     * Handles the logic for mounting the component\n     * @public\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"mountComponent\",\n    value: function mountComponent() {\n      if (this.$element.length > 0 && !this.mounted) {\n        this.mounted = true;\n        this._fetchQuestions();\n      }\n    }\n  }, {\n    key: \"unmountComponent\",\n    value: function unmountComponent() {\n      if (this.mounted) {\n        this.mounted = false;\n        this._stopPolling();\n        this.$element.html(\"\");\n      }\n    }\n\n    /**\n     * Performs the ajax call that updates the list of questions\n     * Before, stores the current questions states to apply them after the ajax call has\n     * been completed\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_fetchQuestions\",\n    value: function _fetchQuestions() {\n      var _this = this;\n      // Store current questions state (open / closed) before overwritting them with the Ajax call\n      // response.\n      this._storeQuestionState(this.$element);\n      $.ajax({\n        url: this.questionsUrl,\n        method: \"GET\",\n        contentType: \"application/javascript\"\n      }).done(function () {\n        _this._updateCounter();\n        _this._setQuestionsState(_this.$element);\n        _this._pollQuestions();\n      });\n    }\n\n    /**\n     * Iterates over all existing questions and stores the state in an internal attribute.\n     * @private\n     * @param {jQuery} $parent - The HTML content for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_storeQuestionState\",\n    value: function _storeQuestionState($parent) {\n      var _this2 = this;\n      $(\"[data-question]\", $parent).each(function (_i, el) {\n        var $el = $(el);\n        var questionId = $el.data(\"question\");\n        if ($el[0].open === true) {\n          _this2.questions[questionId] = OPEN;\n        } else {\n          _this2.questions[questionId] = CLOSED;\n        }\n      });\n    }\n\n    /**\n     * Initializes the states of all the questions.\n     * @private\n     * @param {jQuery} $parent - The HTML container for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_setQuestionsState\",\n    value: function _setQuestionsState($parent) {\n      var _this3 = this;\n      $(\"[data-question]\", $parent).each(function (_i, el) {\n        _this3._setQuestionState($(el));\n      });\n    }\n\n    /**\n     * Initializes the state of a single question with two types of modifications:\n     *   - sets the is-new class if the question is new (doesn't exist in the internal list)\n     *   - sets the state to open if it was open in the internal list\n     * @private\n     * @param {jQuery} $el - The HTML container for the questionnaire.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_setQuestionState\",\n    value: function _setQuestionState($el) {\n      var questionId = $el.data(\"question\");\n      // Current question state\n      var state = this.questions[questionId];\n      // New questions have a special class\n      if (!state) {\n        $el.addClass(\"is-new\");\n      } else if (state === OPEN) {\n        $el.prop(OPEN, true);\n      }\n    }\n\n    /**\n     * Sets a timeout to poll new questions.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_pollQuestions\",\n    value: function _pollQuestions() {\n      var _this4 = this;\n      this._stopPolling();\n      this.pollTimeout = setTimeout(function () {\n        _this4._fetchQuestions();\n      }, this.pollingInterval);\n    }\n\n    /**\n     * Stops polling for new questions.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_stopPolling\",\n    value: function _stopPolling() {\n      if (this.pollTimeout) {\n        clearTimeout(this.pollTimeout);\n      }\n    }\n\n    /**\n     * Updates the counter with the number of questions returned in the Ajax call\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_updateCounter\",\n    value: function _updateCounter() {\n      if (this.$counter) {\n        var questionsCount = this.$element.find(\"details\").length;\n        this.$counter.html(\"(\".concat(questionsCount, \")\"));\n      }\n    }\n  }]);\n  return PollComponent;\n}();\nexport { PollComponent as default };","map":{"version":3,"names":["$","window","OPEN","CLOSED","PollComponent","$element","config","$counter","arguments","length","undefined","_classCallCheck","questionsUrl","pollingInterval","mounted","questions","_createClass","key","value","isMounted","mountComponent","_fetchQuestions","unmountComponent","_stopPolling","html","_this","_storeQuestionState","ajax","url","method","contentType","done","_updateCounter","_setQuestionsState","_pollQuestions","$parent","_this2","each","_i","el","$el","questionId","data","open","_this3","_setQuestionState","state","addClass","prop","_this4","pollTimeout","setTimeout","clearTimeout","questionsCount","find","concat","default"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-meetings-0.27.3/app/packs/src/decidim/meetings/poll.component.js"],"sourcesContent":["/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n\n/**\n * A plain Javascript component that handles questions from polls in meetings:\n *   - fetches them via Ajax\n *   - enables a polling to automatically update them\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nconst $ = window.$;\n\n// Default question states\nconst OPEN = \"open\";\nconst CLOSED = \"closed\";\n\nexport default class PollComponent {\n  constructor($element, config, $counter = null) {\n    this.$element = $element;\n    this.$counter = $counter;\n    this.questionsUrl = config.questionsUrl;\n    this.pollingInterval = config.pollingInterval || 5000;\n    this.mounted = false;\n    this.questions = {};\n  }\n\n  /**\n   * Returns if the component is mounted or not\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  isMounted() {\n    return this.mounted;\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  mountComponent() {\n    if (this.$element.length > 0 && !this.mounted) {\n      this.mounted = true;\n      this._fetchQuestions();\n    }\n  }\n\n  unmountComponent() {\n    if (this.mounted) {\n      this.mounted = false;\n      this._stopPolling();\n      this.$element.html(\"\");\n    }\n  }\n\n  /**\n   * Performs the ajax call that updates the list of questions\n   * Before, stores the current questions states to apply them after the ajax call has\n   * been completed\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _fetchQuestions() {\n    // Store current questions state (open / closed) before overwritting them with the Ajax call\n    // response.\n    this._storeQuestionState(this.$element);\n\n    $.ajax({\n      url: this.questionsUrl,\n      method: \"GET\",\n      contentType: \"application/javascript\"\n    }).done(() => {\n      this._updateCounter();\n      this._setQuestionsState(this.$element);\n      this._pollQuestions();\n    });\n  }\n\n  /**\n   * Iterates over all existing questions and stores the state in an internal attribute.\n   * @private\n   * @param {jQuery} $parent - The HTML content for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _storeQuestionState($parent) {\n    $(\"[data-question]\", $parent).each((_i, el) => {\n      const $el = $(el);\n      const questionId = $el.data(\"question\");\n      if ($el[0].open === true) {\n        this.questions[questionId] = OPEN;\n      } else {\n        this.questions[questionId] = CLOSED;\n      }\n    });\n  }\n\n  /**\n   * Initializes the states of all the questions.\n   * @private\n   * @param {jQuery} $parent - The HTML container for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _setQuestionsState($parent) {\n    $(\"[data-question]\", $parent).each((_i, el) => {\n      this._setQuestionState($(el));\n    });\n  }\n\n  /**\n   * Initializes the state of a single question with two types of modifications:\n   *   - sets the is-new class if the question is new (doesn't exist in the internal list)\n   *   - sets the state to open if it was open in the internal list\n   * @private\n   * @param {jQuery} $el - The HTML container for the questionnaire.\n   * @returns {Void} - Returns nothing\n   */\n  _setQuestionState($el) {\n    const questionId = $el.data(\"question\");\n    // Current question state\n    const state = this.questions[questionId];\n    // New questions have a special class\n    if (!state) {\n      $el.addClass(\"is-new\");\n    } else if (state === OPEN) {\n      $el.prop(OPEN, true);\n    }\n  }\n\n  /**\n   * Sets a timeout to poll new questions.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _pollQuestions() {\n    this._stopPolling();\n\n    this.pollTimeout = setTimeout(() => {\n      this._fetchQuestions();\n    }, this.pollingInterval);\n  }\n\n  /**\n   * Stops polling for new questions.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _stopPolling() {\n    if (this.pollTimeout) {\n      clearTimeout(this.pollTimeout);\n    }\n  }\n\n  /**\n   * Updates the counter with the number of questions returned in the Ajax call\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _updateCounter() {\n    if (this.$counter) {\n      const questionsCount = this.$element.find(\"details\").length;\n      this.$counter.html(`(${questionsCount})`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}