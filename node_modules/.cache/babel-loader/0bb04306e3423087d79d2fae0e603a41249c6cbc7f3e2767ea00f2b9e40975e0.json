{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n/* eslint-disable require-jsdoc */\n\n// ORGINAL: https://github.com/quilljs/delta/blob/ddda3bf088cda3ec03d5dbcc1179679d147f3a02/src/AttributeMap.ts\nexport default function attributeDiff(attributes1, attributes2) {\n  var alpha = attributes1;\n  var beta = attributes2;\n  if (_typeof(alpha) !== \"object\") {\n    alpha = {};\n  }\n  if (_typeof(beta) !== \"object\") {\n    beta = {};\n  }\n  var attributes = Object.keys(alpha).concat(Object.keys(beta)).reduce(function (attrs, key) {\n    // ORGINAL: import isEqual from 'lodash.isequal'; if (!isEqual(a[key], b[key]))\n    if (alpha[key] !== beta[key]) {\n      attrs[key] = null;\n      if (beta[key]) {\n        attrs[key] = beta[key];\n      }\n    }\n    return attrs;\n  }, {});\n  if (Object.keys(attributes).length > 0) {\n    return attributes;\n  }\n  return null;\n}","map":{"version":3,"names":["attributeDiff","attributes1","attributes2","alpha","beta","_typeof","attributes","Object","keys","concat","reduce","attrs","key","length"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/editor/attribute_diff.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\n// ORGINAL: https://github.com/quilljs/delta/blob/ddda3bf088cda3ec03d5dbcc1179679d147f3a02/src/AttributeMap.ts\nexport default function attributeDiff(attributes1, attributes2) {\n  let alpha = attributes1;\n  let beta = attributes2;\n  if (typeof alpha !== \"object\") {\n    alpha = {};\n  }\n  if (typeof beta !== \"object\") {\n    beta = {};\n  }\n  const attributes = Object.keys(alpha).concat(Object.keys(beta)).reduce((attrs, key) => {\n    // ORGINAL: import isEqual from 'lodash.isequal'; if (!isEqual(a[key], b[key]))\n    if ((alpha[key] !== beta[key])) {\n      attrs[key] = null;\n      if (beta[key]) {\n        attrs[key] = beta[key]\n      }\n    }\n    return attrs;\n  }, {});\n\n  if (Object.keys(attributes).length > 0) {\n    return attributes;\n  }\n  return null;\n}\n"],"mappings":";;;;;;;;;AAAA;;AAEA;AACA,eAAe,SAASA,aAAaA,CAACC,WAAW,EAAEC,WAAW,EAAE;EAC9D,IAAIC,KAAK,GAAGF,WAAW;EACvB,IAAIG,IAAI,GAAGF,WAAW;EACtB,IAAIG,OAAA,CAAOF,KAAK,MAAK,QAAQ,EAAE;IAC7BA,KAAK,GAAG,CAAC,CAAC;EACZ;EACA,IAAIE,OAAA,CAAOD,IAAI,MAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAG,CAAC,CAAC;EACX;EACA,IAAME,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,MAAM,CAACF,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAAC,CAACM,MAAM,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAK;IACrF;IACA,IAAKT,KAAK,CAACS,GAAG,CAAC,KAAKR,IAAI,CAACQ,GAAG,CAAC,EAAG;MAC9BD,KAAK,CAACC,GAAG,CAAC,GAAG,IAAI;MACjB,IAAIR,IAAI,CAACQ,GAAG,CAAC,EAAE;QACbD,KAAK,CAACC,GAAG,CAAC,GAAGR,IAAI,CAACQ,GAAG,CAAC;MACxB;IACF;IACA,OAAOD,KAAK;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,IAAIJ,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACO,MAAM,GAAG,CAAC,EAAE;IACtC,OAAOP,UAAU;EACnB;EACA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}