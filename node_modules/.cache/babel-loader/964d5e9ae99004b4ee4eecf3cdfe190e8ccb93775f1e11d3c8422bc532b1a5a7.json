{"ast":null,"code":"/* eslint-disable require-jsdoc, max-lines, no-return-assign, func-style, id-length, no-plusplus, no-use-before-define, no-negated-condition, init-declarations, no-invalid-this, no-param-reassign, no-ternary, multiline-ternary, no-nested-ternary, no-eval, no-extend-native, prefer-reflect */\n/* eslint dot-location: [\"error\", \"property\"], no-negated-condition: \"error\" */\n/* eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }] */\n/* eslint no-unused-vars: 0 */\n\nimport { select, selectAll, event } from \"d3-selection\";\nimport { max } from \"d3-array\";\nimport { hierarchy } from \"d3-hierarchy\";\nimport { forceManyBody, forceCollide, forceCenter, forceX, forceY, forceSimulation, forceLink } from \"d3-force\";\nimport { drag } from \"d3-drag\";\nimport { json } from \"d3-fetch\";\n\n// lib\nvar renderOrgCharts = function renderOrgCharts() {\n  var $orgChartContainer = $(\".js-orgchart\");\n  var $btnReset = $(\".js-reset-orgchart\");\n  var dataDepicted = null;\n  var fake = false;\n  var orgchart = {};\n\n  // lib - https://bl.ocks.org/bumbeishvili/b96ba47ea21d14dfce6ebb859b002d3a\n  var renderChartCollapsibleNetwork = function renderChartCollapsibleNetwork(params) {\n    // exposed variables\n    var attrs = {\n      id: \"id\".concat(Math.floor(Math.random() * 1000000)),\n      svgWidth: 960,\n      svgHeight: 600,\n      marginTop: 0,\n      marginBottom: 5,\n      marginRight: 0,\n      marginLeft: 30,\n      container: \"body\",\n      distance: 150,\n      hiddenChildLevel: 1,\n      hoverOpacity: 0.2,\n      maxTextDisplayZoomLevel: 1,\n      lineStrokeWidth: 1.5,\n      fakeRoot: false,\n      nodeGutter: {\n        x: 16,\n        y: 8\n      },\n      childrenIndicatorRadius: 15,\n      fakeBorderWidth: 32,\n      data: null\n    };\n\n    /* ############### IF EXISTS OVERWRITE ATTRIBUTES FROM PASSED PARAM  #######  */\n\n    var attrKeys = Object.keys(attrs);\n    attrKeys.forEach(function (key) {\n      if (params && params[key]) {\n        attrs[key] = params[key];\n      }\n    });\n\n    // innerFunctions which will update visuals\n    var updateData;\n    var _collapse, _expand;\n    var filter;\n    var _hierarchy = {};\n\n    // main chart object\n    var main = function main(_selection) {\n      _selection.each(function scope() {\n        // calculated properties\n        var calc = {};\n        calc.chartLeftMargin = attrs.marginLeft;\n        calc.chartTopMargin = attrs.marginTop;\n        calc.chartWidth = attrs.svgWidth - attrs.marginRight - calc.chartLeftMargin;\n        calc.chartHeight = attrs.svgHeight - attrs.marginBottom - calc.chartTopMargin;\n\n        // ########################## HIERARCHY STUFF  #########################\n        _hierarchy.root = hierarchy(attrs.data.root);\n\n        // ###########################   BEHAVIORS #########################\n        var behaviors = {};\n        // behaviors.zoom = zoom().scaleExtent([0.75, 100, 8]).on(\"zoom\", zoomed)\n        behaviors.drag = drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n\n        // ###########################   LAYOUTS #########################\n        var layouts = {};\n\n        // custom radial layout\n        layouts.radial = radial();\n\n        // ###########################   FORCE STUFF #########################\n        var force = {};\n        force.link = forceLink().id(function (d) {\n          return d.id;\n        });\n        force.charge = forceManyBody().strength(-240);\n        force.center = forceCenter(calc.chartWidth / 2, calc.chartHeight / 2);\n\n        // prevent collide\n        force.collide = forceCollide().radius(function (d) {\n          // Creates an invented radius based on element measures: diagonal = 2 * radius = sqrt(width^2, height^2)\n          var base = (d.bbox || {}).width + attrs.nodeGutter.x * 2;\n          var height = (d.bbox || {}).height + attrs.nodeGutter.y * 2;\n          var diagonal = Math.sqrt(Math.pow(base, 2) + Math.pow(height, 2));\n          var fakeRadius = diagonal / 2;\n\n          // return max([attrs.nodeDistance * 3, fakeRadius])\n          return fakeRadius * 1.5;\n        });\n\n        // manually set x positions (which is calculated using custom radial layout)\n        force.x = forceX().strength(0.5).x(function (d) {\n          // if node does not have children and is channel (depth=2) , then position it on parent's coordinate\n          if (!d.children && d.depth > 2) {\n            if (d.parent) {\n              d = d.parent;\n            }\n          }\n\n          // custom circle projection -  radius will be -  (d.depth - 1) * 150\n          return projectCircle(d.proportion, (d.depth - 1) * attrs.distance)[0];\n        });\n\n        // manually set y positions (which is calculated using cluster)\n        force.y = forceY().strength(0.5).y(function (d) {\n          // if node does not have children and is channel (depth=2) , then position it on parent's coordinate\n          if (!d.children && d.depth > 2) {\n            if (d.parent) {\n              d = d.parent;\n            }\n          }\n\n          // custom circle projection -  radius will be -  (d.depth - 1) * 150\n          return projectCircle(d.proportion, (d.depth - 1) * attrs.distance)[1];\n        });\n\n        // ---------------------------------  INITIALISE FORCE SIMULATION ----------------------------\n\n        // get based on top parameter simulation\n        force.simulation = forceSimulation().force(\"link\", force.link).force(\"charge\", force.charge).force(\"center\", force.center).force(\"collide\", force.collide).force(\"x\", force.x).force(\"y\", force.y);\n\n        // ###########################   HIERARCHY STUFF #########################\n\n        // flatten root\n        var arr = flatten(_hierarchy.root);\n\n        // hide members based on their depth\n        arr.forEach(function (d) {\n          // Hide fake root node\n          if (attrs.fakeRoot && d.depth === 1) {\n            d.hidden = true;\n          }\n          if (d.depth > attrs.hiddenChildLevel) {\n            d._children = d.children;\n            d.children = null;\n          }\n        });\n\n        // ####################################  DRAWINGS #######################\n\n        // drawing containers\n        var container = select(this);\n\n        // add svg\n        var svg = patternify(container, {\n          tag: \"svg\",\n          selector: \"svg-chart-container\"\n        }).attr(\"width\", attrs.svgWidth).attr(\"height\", attrs.svgHeight);\n        // .call(behaviors.zoom)\n\n        // add container g element\n        var chart = patternify(svg, {\n          tag: \"g\",\n          selector: \"chart\"\n        }).attr(\"transform\", \"translate(\".concat(calc.chartLeftMargin, \",\").concat(calc.chartTopMargin, \")\"));\n\n        // ################################   Chart Content Drawing ##################################\n\n        // link wrapper\n        var linksWrapper = patternify(chart, {\n          tag: \"g\",\n          selector: \"links-wrapper\"\n        });\n\n        // node wrapper\n        var nodesWrapper = patternify(chart, {\n          tag: \"g\",\n          selector: \"nodes-wrapper\"\n        });\n        var links, nodes;\n\n        // reusable function which updates visual based on data change\n        update();\n\n        // update visual based on data change\n        function update(clickedNode) {\n          // Show/hide reset button\n          clickedNode ? $btnReset.removeClass(\"invisible\") : $btnReset.addClass(\"invisible\");\n\n          // set xy and proportion properties with custom radial layout\n          layouts.radial(_hierarchy.root);\n\n          // nodes and links array\n          var nodesArr = flatten(_hierarchy.root, true).orderBy(function (d) {\n            return d.depth;\n          }).filter(function (d) {\n            return !d.hidden;\n          });\n          var linksArr = _hierarchy.root.links().filter(function (d) {\n            return !d.source.hidden;\n          }).filter(function (d) {\n            return !d.target.hidden;\n          });\n\n          // make new nodes to appear near the parents\n          nodesArr.forEach(function (d) {\n            if (clickedNode && clickedNode.id === (d.parent && d.parent.id)) {\n              d.x = d.parent.x;\n              d.y = d.parent.y;\n            }\n          });\n\n          // links\n          links = linksWrapper.selectAll(\".link\").data(linksArr, function (d) {\n            return d.target.id;\n          });\n          links.exit().remove();\n          links = links.enter().append(\"line\").attr(\"class\", \"link\").merge(links);\n\n          // node groups\n          nodes = nodesWrapper.selectAll(\".node\").data(nodesArr, function (d) {\n            return d.id;\n          });\n          nodes.exit().remove();\n          var enteredNodes = nodes.enter().append(\"g\").attr(\"class\", \"node\");\n\n          // bind event handlers\n          enteredNodes.on(\"click\", nodeClick).on(\"mouseenter\", nodeMouseEnter).on(\"mouseleave\", nodeMouseLeave).call(behaviors.drag);\n\n          // channels grandchildren\n          enteredNodes.append(\"rect\").attr(\"class\", \"as-card\").attr(\"rx\", 4).attr(\"ry\", 4);\n          enteredNodes.append(\"text\").attr(\"class\", \"as-text\").text(function (d) {\n            return d.data.name;\n          });\n          enteredNodes.selectAll(\"text\").each(function (d) {\n            d.bbox = this.getBBox();\n          });\n          enteredNodes.selectAll(\"rect\").attr(\"x\", function (d) {\n            return d.bbox.x - attrs.nodeGutter.x;\n          }).attr(\"y\", function (d) {\n            return d.bbox.y - attrs.nodeGutter.y;\n          }).attr(\"width\", function (d) {\n            return d.bbox.width + 2 * attrs.nodeGutter.x;\n          }).attr(\"height\", function (d) {\n            return d.bbox.height + 2 * attrs.nodeGutter.y;\n          });\n\n          // append circle & text only when there are children\n          enteredNodes.append(\"circle\").filter(function (d) {\n            return Boolean(d.children) || Boolean(d._children);\n          }).attr(\"class\", \"as-circle\").attr(\"r\", attrs.childrenIndicatorRadius).attr(\"cx\", function (d) {\n            return d.bbox.x + d.bbox.width + attrs.nodeGutter.x;\n          }).attr(\"cy\", function (d) {\n            return d.bbox.y + d.bbox.height + attrs.nodeGutter.y;\n          });\n          enteredNodes.append(\"text\").filter(function (d) {\n            return Boolean(d.children) || Boolean(d._children);\n          }).attr(\"class\", \"as-text\").attr(\"dx\", function (d) {\n            return d.bbox.x + d.bbox.width + attrs.nodeGutter.x;\n          }).attr(\"dy\", attrs.childrenIndicatorRadius + 3).text(function (d) {\n            return max([(d.children || {}).length, (d._children || {}).length]);\n          });\n\n          // merge  node groups and style it\n          nodes = enteredNodes.merge(nodes);\n\n          // force simulation\n          force.simulation.nodes(nodesArr).on(\"tick\", ticked);\n\n          // links simulation\n          force.simulation.force(\"link\").links(links).id(function (d) {\n            return d.id;\n          }).distance(attrs.distance * 2).strength(2);\n        }\n\n        // ####################################### EVENT HANDLERS  ########################\n\n        // zoom handler\n        // function zoomed() {\n        //   // get transform event\n        //   let transform = event.transform\n        //   attrs.lastTransform = transform\n        //\n        //   // apply transform event props to the wrapper\n        //   chart.attr(\"transform\", transform)\n        //\n        //   svg.selectAll(\".node\").attr(\"transform\", (d) => `translate(${d.x},${d.y}) scale(${1 / (attrs.lastTransform ? attrs.lastTransform.k : 1)})`)\n        //   svg.selectAll(\".link\").attr(\"stroke-width\", attrs.lineStrokeWidth / (attrs.lastTransform ? attrs.lastTransform.k : 1))\n        // }\n\n        // tick handler\n        function ticked() {\n          var fakeBorderWidth = attrs.fakeBorderWidth;\n          var maxXValueAvailable = function maxXValueAvailable(value) {\n            return Math.max(Math.min(calc.chartWidth - fakeBorderWidth, value), fakeBorderWidth);\n          };\n          var maxYValueAvailable = function maxYValueAvailable(value) {\n            return Math.max(Math.min(calc.chartHeight - fakeBorderWidth, value), fakeBorderWidth);\n          };\n          // set links position\n          links.attr(\"x1\", function (d) {\n            return maxXValueAvailable(d.source.x);\n          }).attr(\"y1\", function (d) {\n            return maxYValueAvailable(d.source.y);\n          }).attr(\"x2\", function (d) {\n            return maxXValueAvailable(d.target.x);\n          }).attr(\"y2\", function (d) {\n            return maxYValueAvailable(d.target.y);\n          });\n\n          // set nodes position\n          svg.selectAll(\".node\").attr(\"transform\", function (d) {\n            return \"translate(\".concat(maxXValueAvailable(d.x), \",\").concat(maxYValueAvailable(d.y), \")\");\n          });\n        }\n\n        // handler drag start event\n        function dragstarted() {\n          // disable node fixing\n          nodes.each(function (d) {\n            d.fx = null;\n            d.fy = null;\n          });\n        }\n\n        // handle dragging event\n        function dragged(d) {\n          // make dragged node fixed\n          d.fx = event.x;\n          d.fy = event.y;\n        }\n\n        // -------------------- handle drag end event ---------------\n        function dragended() {\n          // we are doing nothing, here , aren't we?\n        }\n\n        // -------------------------- node mouse hover handler ---------------\n        function nodeMouseEnter(d) {\n          // get links\n          var _links = _hierarchy.root.links();\n\n          // get hovered node connected links\n          var connectedLinks = _links.filter(function (l) {\n            return l.source.id === d.id || l.target.id === d.id;\n          });\n\n          // get hovered node linked nodes\n          var linkedNodes = connectedLinks.map(function (s) {\n            return s.source.id;\n          }).concat(connectedLinks.map(function (c) {\n            return c.target.id;\n          }));\n\n          // reduce all other nodes opacity\n          nodesWrapper.selectAll(\".node\").filter(function (n) {\n            return linkedNodes.indexOf(n.id) === -1;\n          }).attr(\"opacity\", attrs.hoverOpacity);\n\n          // reduce all other links opacity\n          linksWrapper.selectAll(\".link\").attr(\"opacity\", attrs.hoverOpacity);\n\n          // highlight hovered nodes connections\n          linksWrapper.selectAll(\".link\").filter(function (l) {\n            return l.source.id === d.id || l.target.id === d.id;\n          }).attr(\"opacity\", 1);\n        }\n\n        // --------------- handle mouseleave event ---------------\n        function nodeMouseLeave() {\n          // return things back to normal\n          nodesWrapper.selectAll(\".node\").attr(\"opacity\", 1);\n          linksWrapper.selectAll(\".link\").attr(\"opacity\", 1);\n        }\n\n        // --------------- handle node click event ---------------\n        function nodeClick(d) {\n          // free fixed nodes\n          nodes.each(function (di) {\n            di.fx = null;\n            di.fy = null;\n          });\n\n          // collapse or expand node\n          if (d.children) {\n            _collapse(d);\n          } else if (d._children) {\n            _expand(d);\n          } else {\n            // nothing is to collapse or expand\n          }\n          freeNodes();\n        }\n\n        // #########################################  UTIL FUNCS ##################################\n        updateData = function updateData() {\n          main.run();\n        };\n        _collapse = function collapse(d) {\n          var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (d.children) {\n            if (deep) {\n              d.children.forEach(function (e) {\n                return _collapse(e, true);\n              });\n            }\n            d._children = d.children;\n            d.children = null;\n          }\n          update(d);\n          force.simulation.restart();\n          force.simulation.alphaTarget(0.15);\n        };\n        _expand = function expand(d) {\n          var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (d._children) {\n            if (deep) {\n              d._children.forEach(function (e) {\n                return _expand(e, true);\n              });\n            }\n            d.children = d._children;\n            d._children = null;\n          }\n          update(d);\n          force.simulation.restart();\n          force.simulation.alphaTarget(0.15);\n        };\n\n        // function slowDownNodes() {\n        //   force.simulation.alphaTarget(0.05)\n        // }\n\n        // function speedUpNodes() {\n        //   force.simulation.alphaTarget(0.45)\n        // }\n\n        function freeNodes() {\n          selectAll(\".node\").each(function (n) {\n            n.fx = null;\n            n.fy = null;\n          });\n        }\n        function projectCircle(value, radius) {\n          var r = radius || 0;\n          var corner = value * 2 * Math.PI;\n          return [Math.sin(corner) * r, -Math.cos(corner) * r];\n        }\n\n        // recursively loop on children and extract nodes as an array\n        function flatten(root, clustered) {\n          var nodesArray = [];\n          var i = 0;\n          function recurse(node, depth) {\n            if (node.children) {\n              node.children.forEach(function (child) {\n                recurse(child, depth + 1);\n              });\n            }\n            if (!node.id) {\n              node.id = ++i;\n            } else {\n              ++i;\n            }\n            node.depth = depth;\n            if (clustered) {\n              if (!node.cluster) {\n                // if cluster coordinates are not set, set it\n                node.cluster = {\n                  x: node.x,\n                  y: node.y\n                };\n              }\n            }\n            nodesArray.push(node);\n          }\n          recurse(root, 1);\n          return nodesArray;\n        }\n        function debug() {\n          if (attrs.isDebug) {\n            // stringify func\n            var stringified = String(scope);\n\n            // parse variable names\n            var groupVariables = stringified\n            // match var x-xx= {}\n            .match(/var\\s+([\\w])+\\s*=\\s*{\\s*}/gi)\n            // match xxx\n            .map(function (d) {\n              return d.match(/\\s+\\w*/gi).filter(function (s) {\n                return s.trim();\n              });\n            })\n            // get xxx\n            .map(function (v) {\n              return v[0].trim();\n            });\n\n            // assign local variables to the scope\n            groupVariables.forEach(function (v) {\n              main[\"P_\".concat(v)] = eval(v);\n            });\n          }\n        }\n        debug();\n      });\n    };\n\n    // ----------- PROTOTYEPE FUNCTIONS  ----------------------\n    function patternify(node, _params) {\n      var selector = _params.selector;\n      var elementTag = _params.tag;\n      var _data = _params.data || [selector];\n\n      // pattern in action\n      var _selection = node.selectAll(\".\".concat(selector)).data(_data);\n      _selection.exit().remove();\n      _selection = _selection.enter().append(elementTag).merge(_selection);\n      _selection.attr(\"class\", selector);\n      return _selection;\n    }\n\n    // custom radial layout\n    function radial() {\n      return function (root) {\n        recurse(root, 0, 1);\n        function recurse(node, min, _max) {\n          node.proportion = (_max + min) / 2;\n          if (!node.x) {\n            // if node has parent, match entered node positions to it's parent\n            if (node.parent) {\n              node.x = node.parent.x;\n            } else {\n              node.x = 0;\n            }\n          }\n\n          // if node had parent, match entered node positions to it's parent\n          if (!node.y) {\n            if (node.parent) {\n              node.y = node.parent.y;\n            } else {\n              node.y = 0;\n            }\n          }\n\n          // recursively do the same for children\n          if (node.children) {\n            var offset = (_max - min) / node.children.length;\n            node.children.forEach(function (child, i) {\n              var newMin = min + offset * i;\n              var newMax = newMin + offset;\n              recurse(child, newMin, newMax);\n            });\n          }\n        }\n      };\n    }\n\n    // https://github.com/bumbeishvili/d3js-boilerplates#orderby\n    Array.prototype.orderBy = function (func) {\n      this.sort(function (_a, _b) {\n        var a = func(_a);\n        var b = func(_b);\n        if (typeof a === \"string\" || a instanceof String) {\n          return a.localeCompare(b);\n        }\n        return a - b;\n      });\n      return this;\n    };\n\n    // ##########################  BOILEPLATE STUFF ################\n\n    // dinamic keys functions\n    Object.keys(attrs).forEach(function (key) {\n      // Attach variables to main function\n      return main[key] = function (_) {\n        var string = \"attrs['\".concat(key, \"'] = _\");\n        if (!arguments.length) {\n          return eval(\" attrs['\".concat(key, \"'];\"));\n        }\n        eval(string);\n        return main;\n      };\n    });\n\n    // set attrs as property\n    main.attrs = attrs;\n\n    // debugging visuals\n    main.debug = function (isDebug) {\n      attrs.isDebug = isDebug;\n      if (isDebug) {\n        if (!window.charts) {\n          window.charts = [];\n        }\n        window.charts.push(main);\n      }\n      return main;\n    };\n\n    // exposed update functions\n    main.data = function (value) {\n      if (!arguments.length) {\n        return attrs.data;\n      }\n      attrs.data = value;\n      if (typeof updateData === \"function\") {\n        updateData();\n      }\n      return main;\n    };\n\n    // run  visual\n    main.run = function () {\n      selectAll(attrs.container).call(main);\n      return main;\n    };\n    main.filter = function (filterParams) {\n      if (!arguments.length) {\n        return attrs.filterParams;\n      }\n      attrs.filterParams = filterParams;\n      if (typeof filter === \"function\") {\n        filter();\n      }\n      return main;\n    };\n    main.reset = function () {\n      _hierarchy.root.children.forEach(function (e) {\n        return _collapse(e, true);\n      });\n      main.run();\n      return main;\n    };\n    return main;\n  };\n\n  // initialization\n  $orgChartContainer.each(function (i, container) {\n    var $container = $(container);\n    var width = $container.width();\n    var height = width / (16 / 9);\n    json($container.data(\"url\")).then(function (data) {\n      // Make a fake previous node if the data entry is not hierarchical\n      if (data instanceof Array) {\n        fake = true;\n        dataDepicted = {\n          name: null,\n          children: data\n        };\n      } else {\n        dataDepicted = data;\n      }\n      orgchart = renderChartCollapsibleNetwork().svgHeight(height).svgWidth(width).fakeRoot(fake).container(\"#\".concat(container.id)).data({\n        root: dataDepicted\n      }).debug(true).run();\n    });\n  });\n\n  // reset\n  $btnReset.click(function () {\n    orgchart.reset();\n  });\n};\n$(function () {\n  renderOrgCharts();\n  $(document).on(\"change.zf.tabs\", function () {\n    renderOrgCharts();\n  });\n});","map":{"version":3,"names":["select","selectAll","event","max","hierarchy","forceManyBody","forceCollide","forceCenter","forceX","forceY","forceSimulation","forceLink","drag","json","renderOrgCharts","$orgChartContainer","$","$btnReset","dataDepicted","fake","orgchart","renderChartCollapsibleNetwork","params","attrs","id","concat","Math","floor","random","svgWidth","svgHeight","marginTop","marginBottom","marginRight","marginLeft","container","distance","hiddenChildLevel","hoverOpacity","maxTextDisplayZoomLevel","lineStrokeWidth","fakeRoot","nodeGutter","x","y","childrenIndicatorRadius","fakeBorderWidth","data","attrKeys","Object","keys","forEach","key","updateData","_collapse","_expand","filter","_hierarchy","main","_selection","each","scope","calc","chartLeftMargin","chartTopMargin","chartWidth","chartHeight","root","behaviors","on","dragstarted","dragged","dragended","layouts","radial","force","link","d","charge","strength","center","collide","radius","base","bbox","width","height","diagonal","sqrt","pow","fakeRadius","children","depth","parent","projectCircle","proportion","simulation","arr","flatten","hidden","_children","svg","patternify","tag","selector","attr","chart","linksWrapper","nodesWrapper","links","nodes","update","clickedNode","removeClass","addClass","nodesArr","orderBy","linksArr","source","target","exit","remove","enter","append","merge","enteredNodes","nodeClick","nodeMouseEnter","nodeMouseLeave","call","text","name","getBBox","Boolean","length","ticked","maxXValueAvailable","value","min","maxYValueAvailable","fx","fy","_links","connectedLinks","l","linkedNodes","map","s","c","n","indexOf","di","freeNodes","run","collapse","deep","arguments","undefined","e","restart","alphaTarget","expand","r","corner","PI","sin","cos","clustered","nodesArray","i","recurse","node","child","cluster","push","debug","isDebug","stringified","String","groupVariables","match","trim","v","eval","_params","elementTag","_data","_max","offset","newMin","newMax","Array","prototype","func","sort","_a","_b","a","b","localeCompare","_","string","window","charts","filterParams","reset","$container","then","click","document"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-assemblies-0.27.3/app/packs/src/decidim/assemblies/orgchart.js"],"sourcesContent":["/* eslint-disable require-jsdoc, max-lines, no-return-assign, func-style, id-length, no-plusplus, no-use-before-define, no-negated-condition, init-declarations, no-invalid-this, no-param-reassign, no-ternary, multiline-ternary, no-nested-ternary, no-eval, no-extend-native, prefer-reflect */\n/* eslint dot-location: [\"error\", \"property\"], no-negated-condition: \"error\" */\n/* eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }] */\n/* eslint no-unused-vars: 0 */\n\nimport { select, selectAll, event } from \"d3-selection\";\nimport { max } from \"d3-array\";\nimport { hierarchy } from \"d3-hierarchy\";\nimport { forceManyBody, forceCollide, forceCenter, forceX, forceY, forceSimulation, forceLink } from \"d3-force\";\nimport { drag } from \"d3-drag\";\nimport { json } from \"d3-fetch\";\n\n// lib\nconst renderOrgCharts = () => {\n  const $orgChartContainer = $(\".js-orgchart\")\n  const $btnReset = $(\".js-reset-orgchart\")\n\n  let dataDepicted = null\n  let fake = false\n  let orgchart = {}\n\n  // lib - https://bl.ocks.org/bumbeishvili/b96ba47ea21d14dfce6ebb859b002d3a\n  const renderChartCollapsibleNetwork = (params) => {\n\n    // exposed variables\n    let attrs = {\n      id: `id${Math.floor(Math.random() * 1000000)}`,\n      svgWidth: 960,\n      svgHeight: 600,\n      marginTop: 0,\n      marginBottom: 5,\n      marginRight: 0,\n      marginLeft: 30,\n      container: \"body\",\n      distance: 150,\n      hiddenChildLevel: 1,\n      hoverOpacity: 0.2,\n      maxTextDisplayZoomLevel: 1,\n      lineStrokeWidth: 1.5,\n      fakeRoot: false,\n      nodeGutter: { x: 16, y: 8 },\n      childrenIndicatorRadius: 15,\n      fakeBorderWidth: 32,\n      data: null\n    }\n\n    /* ############### IF EXISTS OVERWRITE ATTRIBUTES FROM PASSED PARAM  #######  */\n\n    let attrKeys = Object.keys(attrs)\n    attrKeys.forEach(function (key) {\n      if (params && params[key]) {\n        attrs[key] = params[key]\n      }\n    })\n\n    // innerFunctions which will update visuals\n    let updateData\n    let collapse, expand\n    let filter\n    let _hierarchy = {}\n\n    // main chart object\n    let main = function (_selection) {\n      _selection.each(function scope() {\n\n        // calculated properties\n        let calc = {}\n        calc.chartLeftMargin = attrs.marginLeft\n        calc.chartTopMargin = attrs.marginTop\n        calc.chartWidth = attrs.svgWidth - attrs.marginRight - calc.chartLeftMargin\n        calc.chartHeight = attrs.svgHeight - attrs.marginBottom - calc.chartTopMargin\n\n        // ########################## HIERARCHY STUFF  #########################\n        _hierarchy.root = hierarchy(attrs.data.root)\n\n        // ###########################   BEHAVIORS #########################\n        let behaviors = {}\n        // behaviors.zoom = zoom().scaleExtent([0.75, 100, 8]).on(\"zoom\", zoomed)\n        behaviors.drag = drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended)\n\n        // ###########################   LAYOUTS #########################\n        let layouts = {}\n\n        // custom radial layout\n        layouts.radial = radial()\n\n        // ###########################   FORCE STUFF #########################\n        let force = {}\n        force.link = forceLink().id((d) => d.id)\n        force.charge = forceManyBody().strength(-240)\n        force.center = forceCenter(calc.chartWidth / 2, calc.chartHeight / 2)\n\n        // prevent collide\n        force.collide = forceCollide().radius((d) => {\n          // Creates an invented radius based on element measures: diagonal = 2 * radius = sqrt(width^2, height^2)\n          let base = (d.bbox || {}).width + (attrs.nodeGutter.x * 2)\n          let height = (d.bbox || {}).height + (attrs.nodeGutter.y * 2)\n          let diagonal = Math.sqrt(Math.pow(base, 2) + Math.pow(height, 2))\n          let fakeRadius = (diagonal / 2)\n\n          // return max([attrs.nodeDistance * 3, fakeRadius])\n          return fakeRadius * 1.5\n        })\n\n        // manually set x positions (which is calculated using custom radial layout)\n        force.x = forceX()\n          .strength(0.5)\n          .x(function (d) {\n\n            // if node does not have children and is channel (depth=2) , then position it on parent's coordinate\n            if (!d.children && d.depth > 2) {\n              if (d.parent) {\n                d = d.parent\n              }\n            }\n\n            // custom circle projection -  radius will be -  (d.depth - 1) * 150\n            return projectCircle(d.proportion, (d.depth - 1) * attrs.distance)[0]\n          })\n\n        // manually set y positions (which is calculated using cluster)\n        force.y = forceY()\n          .strength(0.5)\n          .y(function (d) {\n\n            // if node does not have children and is channel (depth=2) , then position it on parent's coordinate\n            if (!d.children && d.depth > 2) {\n              if (d.parent) {\n                d = d.parent\n              }\n            }\n\n            // custom circle projection -  radius will be -  (d.depth - 1) * 150\n            return projectCircle(d.proportion, (d.depth - 1) * attrs.distance)[1]\n          })\n\n        // ---------------------------------  INITIALISE FORCE SIMULATION ----------------------------\n\n        // get based on top parameter simulation\n        force.simulation = forceSimulation()\n          .force(\"link\", force.link)\n          .force(\"charge\", force.charge)\n          .force(\"center\", force.center)\n          .force(\"collide\", force.collide)\n          .force(\"x\", force.x)\n          .force(\"y\", force.y)\n\n        // ###########################   HIERARCHY STUFF #########################\n\n        // flatten root\n        let arr = flatten(_hierarchy.root)\n\n        // hide members based on their depth\n        arr.forEach((d) => {\n          // Hide fake root node\n          if ((attrs.fakeRoot) && (d.depth === 1)) {\n            d.hidden = true\n          }\n\n          if (d.depth > attrs.hiddenChildLevel) {\n            d._children = d.children\n            d.children = null\n          }\n        })\n\n        // ####################################  DRAWINGS #######################\n\n        // drawing containers\n        let container = select(this)\n\n        // add svg\n        let svg = patternify(container, { tag: \"svg\", selector: \"svg-chart-container\" })\n          .attr(\"width\", attrs.svgWidth)\n          .attr(\"height\", attrs.svgHeight)\n          // .call(behaviors.zoom)\n\n        // add container g element\n        let chart = patternify(svg, { tag: \"g\", selector: \"chart\" })\n          .attr(\"transform\", `translate(${calc.chartLeftMargin},${calc.chartTopMargin})`)\n\n        // ################################   Chart Content Drawing ##################################\n\n        // link wrapper\n        let linksWrapper = patternify(chart, { tag: \"g\", selector: \"links-wrapper\" })\n\n        // node wrapper\n        let nodesWrapper = patternify(chart, { tag: \"g\", selector: \"nodes-wrapper\" })\n        let links, nodes\n\n        // reusable function which updates visual based on data change\n        update()\n\n        // update visual based on data change\n        function update(clickedNode) {\n\n          // Show/hide reset button\n          (clickedNode) ? $btnReset.removeClass(\"invisible\") : $btnReset.addClass(\"invisible\")\n\n          // set xy and proportion properties with custom radial layout\n          layouts.radial(_hierarchy.root)\n\n          // nodes and links array\n          let nodesArr = flatten(_hierarchy.root, true)\n            .orderBy((d) => d.depth)\n            .filter((d) => !d.hidden)\n\n          let linksArr = _hierarchy.root.links()\n            .filter((d) => !d.source.hidden)\n            .filter((d) => !d.target.hidden)\n\n          // make new nodes to appear near the parents\n          nodesArr.forEach(function (d) {\n            if (clickedNode && clickedNode.id === (d.parent && d.parent.id)) {\n              d.x = d.parent.x\n              d.y = d.parent.y\n            }\n          })\n\n          // links\n          links = linksWrapper.selectAll(\".link\")\n            .data(linksArr, (d) => d.target.id)\n          links.exit().remove()\n\n          links = links.enter()\n            .append(\"line\")\n            .attr(\"class\", \"link\")\n            .merge(links)\n\n          // node groups\n          nodes = nodesWrapper.selectAll(\".node\")\n            .data(nodesArr, (d) => d.id)\n          nodes.exit().remove()\n\n          let enteredNodes = nodes.enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n\n          // bind event handlers\n          enteredNodes\n            .on(\"click\", nodeClick)\n            .on(\"mouseenter\", nodeMouseEnter)\n            .on(\"mouseleave\", nodeMouseLeave)\n            .call(behaviors.drag)\n\n          // channels grandchildren\n          enteredNodes.append(\"rect\")\n            .attr(\"class\", \"as-card\")\n            .attr(\"rx\", 4)\n            .attr(\"ry\", 4)\n\n          enteredNodes.append(\"text\")\n            .attr(\"class\", \"as-text\")\n            .text((d) => d.data.name)\n\n          enteredNodes.selectAll(\"text\").each(function(d) {\n            d.bbox = this.getBBox()\n          })\n\n          enteredNodes.selectAll(\"rect\")\n            .attr(\"x\", (d) => d.bbox.x - attrs.nodeGutter.x)\n            .attr(\"y\", (d) => d.bbox.y - attrs.nodeGutter.y)\n            .attr(\"width\", (d) => d.bbox.width + (2 * attrs.nodeGutter.x))\n            .attr(\"height\", (d) => d.bbox.height + (2 * attrs.nodeGutter.y))\n\n          // append circle & text only when there are children\n          enteredNodes\n            .append(\"circle\")\n            .filter((d) => Boolean(d.children) || Boolean(d._children))\n            .attr(\"class\", \"as-circle\")\n            .attr(\"r\", attrs.childrenIndicatorRadius)\n            .attr(\"cx\", (d) => d.bbox.x + d.bbox.width + attrs.nodeGutter.x)\n            .attr(\"cy\", (d) => d.bbox.y + d.bbox.height + attrs.nodeGutter.y)\n\n          enteredNodes\n            .append(\"text\")\n            .filter((d) => Boolean(d.children) || Boolean(d._children))\n            .attr(\"class\", \"as-text\")\n            .attr(\"dx\", (d) => d.bbox.x + d.bbox.width + attrs.nodeGutter.x)\n            .attr(\"dy\", attrs.childrenIndicatorRadius + 3)\n            .text((d) => max([(d.children || {}).length, (d._children || {}).length]))\n\n          // merge  node groups and style it\n          nodes = enteredNodes.merge(nodes)\n\n          // force simulation\n          force.simulation.nodes(nodesArr).on(\"tick\", ticked)\n\n          // links simulation\n          force.simulation.force(\"link\").links(links).id((d) => d.id).distance(attrs.distance * 2).strength(2)\n        }\n\n        // ####################################### EVENT HANDLERS  ########################\n\n        // zoom handler\n        // function zoomed() {\n        //   // get transform event\n        //   let transform = event.transform\n        //   attrs.lastTransform = transform\n        //\n        //   // apply transform event props to the wrapper\n        //   chart.attr(\"transform\", transform)\n        //\n        //   svg.selectAll(\".node\").attr(\"transform\", (d) => `translate(${d.x},${d.y}) scale(${1 / (attrs.lastTransform ? attrs.lastTransform.k : 1)})`)\n        //   svg.selectAll(\".link\").attr(\"stroke-width\", attrs.lineStrokeWidth / (attrs.lastTransform ? attrs.lastTransform.k : 1))\n        // }\n\n        // tick handler\n        function ticked() {\n          const fakeBorderWidth = attrs.fakeBorderWidth\n          const maxXValueAvailable = (value) => Math.max(Math.min(calc.chartWidth - fakeBorderWidth, value), fakeBorderWidth)\n          const maxYValueAvailable = (value) => Math.max(Math.min(calc.chartHeight - fakeBorderWidth, value), fakeBorderWidth)\n          // set links position\n          links\n            .attr(\"x1\", (d) => maxXValueAvailable(d.source.x))\n            .attr(\"y1\", (d) => maxYValueAvailable(d.source.y))\n            .attr(\"x2\", (d) => maxXValueAvailable(d.target.x))\n            .attr(\"y2\", (d) => maxYValueAvailable(d.target.y))\n\n          // set nodes position\n          svg.selectAll(\".node\")\n            .attr(\"transform\", (d) => `translate(${maxXValueAvailable(d.x)},${maxYValueAvailable(d.y)})`)\n        }\n\n        // handler drag start event\n        function dragstarted() {\n          // disable node fixing\n          nodes.each((d) => {\n            d.fx = null\n            d.fy = null\n          })\n        }\n\n        // handle dragging event\n        function dragged(d) {\n          // make dragged node fixed\n          d.fx = event.x\n          d.fy = event.y\n        }\n\n        // -------------------- handle drag end event ---------------\n        function dragended() {\n          // we are doing nothing, here , aren't we?\n        }\n\n        // -------------------------- node mouse hover handler ---------------\n        function nodeMouseEnter(d) {\n          // get links\n          let _links = _hierarchy.root.links()\n\n          // get hovered node connected links\n          let connectedLinks = _links.filter((l) => l.source.id === d.id || l.target.id === d.id)\n\n          // get hovered node linked nodes\n          let linkedNodes = connectedLinks.map((s) => s.source.id).concat(connectedLinks.map((c) => c.target.id))\n\n          // reduce all other nodes opacity\n          nodesWrapper.selectAll(\".node\")\n            .filter((n) => linkedNodes.indexOf(n.id) === -1)\n            .attr(\"opacity\", attrs.hoverOpacity)\n\n          // reduce all other links opacity\n          linksWrapper.selectAll(\".link\")\n            .attr(\"opacity\", attrs.hoverOpacity)\n\n          // highlight hovered nodes connections\n          linksWrapper.selectAll(\".link\")\n            .filter((l) => l.source.id === d.id || l.target.id === d.id)\n            .attr(\"opacity\", 1)\n        }\n\n        // --------------- handle mouseleave event ---------------\n        function nodeMouseLeave() {\n          // return things back to normal\n          nodesWrapper.selectAll(\".node\")\n            .attr(\"opacity\", 1)\n          linksWrapper.selectAll(\".link\")\n            .attr(\"opacity\", 1)\n        }\n\n        // --------------- handle node click event ---------------\n        function nodeClick(d) {\n          // free fixed nodes\n          nodes.each((di) => {\n            di.fx = null\n            di.fy = null\n          })\n\n          // collapse or expand node\n          if (d.children) {\n            collapse(d)\n          } else if (d._children) {\n            expand(d)\n          } else {\n          // nothing is to collapse or expand\n          }\n\n          freeNodes()\n        }\n\n        // #########################################  UTIL FUNCS ##################################\n        updateData = function () {\n          main.run()\n        }\n\n        collapse = function (d, deep = false) {\n          if (d.children) {\n            if (deep) {\n              d.children.forEach((e) => collapse(e, true))\n            }\n\n            d._children = d.children\n            d.children = null\n          }\n\n          update(d)\n          force.simulation.restart()\n          force.simulation.alphaTarget(0.15)\n        }\n\n        expand = function (d, deep = false) {\n          if (d._children) {\n            if (deep) {\n              d._children.forEach((e) => expand(e, true))\n            }\n\n            d.children = d._children\n            d._children = null\n          }\n\n          update(d)\n          force.simulation.restart()\n          force.simulation.alphaTarget(0.15)\n        }\n\n        // function slowDownNodes() {\n        //   force.simulation.alphaTarget(0.05)\n        // }\n\n        // function speedUpNodes() {\n        //   force.simulation.alphaTarget(0.45)\n        // }\n\n        function freeNodes() {\n          selectAll(\".node\").each((n) => {\n            n.fx = null\n            n.fy = null\n          })\n        }\n\n        function projectCircle(value, radius) {\n          let r = radius || 0\n          let corner = value * 2 * Math.PI\n          return [Math.sin(corner) * r, -Math.cos(corner) * r]\n        }\n\n        // recursively loop on children and extract nodes as an array\n        function flatten(root, clustered) {\n          let nodesArray = []\n          let i = 0\n          function recurse(node, depth) {\n            if (node.children) {\n              node.children.forEach(function (child) {\n                recurse(child, depth + 1)\n              })\n            }\n\n            if (!node.id) {\n              node.id = ++i\n            } else {\n              ++i\n            }\n\n            node.depth = depth\n            if (clustered) {\n              if (!node.cluster) {\n              // if cluster coordinates are not set, set it\n                node.cluster = { x: node.x, y: node.y }\n              }\n            }\n            nodesArray.push(node)\n          }\n          recurse(root, 1)\n          return nodesArray\n        }\n\n        function debug() {\n          if (attrs.isDebug) {\n          // stringify func\n            let stringified = String(scope)\n\n            // parse variable names\n            let groupVariables = stringified\n              // match var x-xx= {}\n              .match(/var\\s+([\\w])+\\s*=\\s*{\\s*}/gi)\n              // match xxx\n              .map((d) => d.match(/\\s+\\w*/gi).filter((s) => s.trim()))\n              // get xxx\n              .map((v) => v[0].trim())\n\n            // assign local variables to the scope\n            groupVariables.forEach((v) => {\n              main[`P_${v}`] = eval(v)\n            })\n          }\n        }\n\n        debug()\n\n      })\n    }\n\n    // ----------- PROTOTYEPE FUNCTIONS  ----------------------\n    function patternify(node, _params) {\n      let selector = _params.selector\n      let elementTag = _params.tag\n      let _data = _params.data || [selector]\n\n      // pattern in action\n      let _selection = node.selectAll(`.${selector}`).data(_data)\n      _selection.exit().remove()\n      _selection = _selection.enter().append(elementTag).merge(_selection)\n      _selection.attr(\"class\", selector)\n\n      return _selection\n    }\n\n    // custom radial layout\n    function radial() {\n      return function (root) {\n\n        recurse(root, 0, 1)\n\n        function recurse(node, min, _max) {\n          node.proportion = (_max + min) / 2\n          if (!node.x) {\n\n            // if node has parent, match entered node positions to it's parent\n            if (node.parent) {\n              node.x = node.parent.x\n            } else {\n              node.x = 0\n            }\n          }\n\n          // if node had parent, match entered node positions to it's parent\n          if (!node.y) {\n            if (node.parent) {\n              node.y = node.parent.y\n            } else {\n              node.y = 0\n            }\n          }\n\n          // recursively do the same for children\n          if (node.children) {\n            let offset = (_max - min) / node.children.length\n            node.children.forEach(function (child, i) {\n              let newMin = min + (offset * i)\n              let newMax = newMin + offset\n\n              recurse(child, newMin, newMax)\n            })\n          }\n        }\n      }\n    }\n\n    // https://github.com/bumbeishvili/d3js-boilerplates#orderby\n    Array.prototype.orderBy = function (func) {\n      this.sort((_a, _b) => {\n        let a = func(_a)\n        let b = func(_b)\n        if (typeof a === \"string\" || a instanceof String) {\n          return a.localeCompare(b)\n        }\n        return a - b\n      })\n\n      return this\n    }\n\n    // ##########################  BOILEPLATE STUFF ################\n\n    // dinamic keys functions\n    Object.keys(attrs).forEach((key) => {\n      // Attach variables to main function\n      return main[key] = function (_) {\n        let string = `attrs['${key}'] = _`\n\n        if (!arguments.length) {\n          return eval(` attrs['${key}'];`)\n        }\n\n        eval(string)\n\n        return main\n      }\n    })\n\n    // set attrs as property\n    main.attrs = attrs\n\n    // debugging visuals\n    main.debug = function (isDebug) {\n      attrs.isDebug = isDebug\n      if (isDebug) {\n        if (!window.charts) {\n          window.charts = []\n        }\n        window.charts.push(main)\n      }\n      return main\n    }\n\n    // exposed update functions\n    main.data = function (value) {\n      if (!arguments.length) {\n        return attrs.data\n      }\n\n      attrs.data = value\n      if (typeof updateData === \"function\") {\n        updateData()\n      }\n      return main\n    }\n\n    // run  visual\n    main.run = function () {\n      selectAll(attrs.container)\n        .call(main)\n      return main\n    }\n\n    main.filter = function (filterParams) {\n      if (!arguments.length) {\n        return attrs.filterParams\n      }\n\n      attrs.filterParams = filterParams\n      if (typeof filter === \"function\") {\n        filter()\n      }\n      return main\n    }\n\n    main.reset = function () {\n\n      _hierarchy.root.children.forEach((e) => collapse(e, true))\n      main.run()\n\n      return main\n    }\n\n    return main\n  }\n\n  // initialization\n  $orgChartContainer.each((i, container) => {\n\n    let $container = $(container)\n    let width = $container.width()\n    let height = width / (16 / 9)\n\n    json($container.data(\"url\")).then((data) => {\n      // Make a fake previous node if the data entry is not hierarchical\n      if (data instanceof Array) {\n        fake = true\n        dataDepicted = {\n          name: null,\n          children: data\n        }\n      } else {\n        dataDepicted = data\n      }\n\n      orgchart = renderChartCollapsibleNetwork()\n        .svgHeight(height)\n        .svgWidth(width)\n        .fakeRoot(fake)\n        .container(`#${container.id}`)\n        .data({\n          root: dataDepicted\n        })\n        .debug(true)\n        .run()\n    })\n  })\n\n  // reset\n  $btnReset.click(function() {\n    orgchart.reset()\n  })\n}\n\n$(() => {\n  renderOrgCharts()\n  $(document).on(\"change.zf.tabs\", () => {\n    renderOrgCharts()\n  });\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}