{"ast":null,"code":"/* eslint-disable max-lines */\n/* eslint-disable require-jsdoc */\n\nimport AutoButtonsByMinItemsComponent from \"src/decidim/forms/admin/auto_buttons_by_min_items.component\";\nimport AutoSelectOptionsByTotalItemsComponent from \"src/decidim/forms/admin/auto_select_options_by_total_items.component\";\nimport AutoSelectOptionsFromUrl from \"src/decidim/forms/admin/auto_select_options_from_url.component\";\nimport createLiveTextUpdateComponent from \"src/decidim/forms/admin/live_text_update.component\";\nimport AutoButtonsByPositionComponent from \"src/decidim/admin/auto_buttons_by_position.component\";\nimport AutoLabelByPositionComponent from \"src/decidim/admin/auto_label_by_position.component\";\nimport createSortList from \"src/decidim/admin/sort_list.component\";\nimport createDynamicFields from \"src/decidim/admin/dynamic_fields.component\";\nimport createFieldDependentInputs from \"src/decidim/admin/field_dependent_inputs.component\";\nimport createQuillEditor from \"src/decidim/editor\";\nimport initLanguageChangeSelect from \"src/decidim/admin/choose_language\";\nexport default function createEditableForm() {\n  var wrapperSelector = \".questionnaire-questions\";\n  var fieldSelector = \".questionnaire-question\";\n  var questionTypeSelector = \"select[name$=\\\\[question_type\\\\]]\";\n  var answerOptionFieldSelector = \".questionnaire-question-answer-option\";\n  var answerOptionsWrapperSelector = \".questionnaire-question-answer-options\";\n  var answerOptionRemoveFieldButtonSelector = \".remove-answer-option\";\n  var matrixRowFieldSelector = \".questionnaire-question-matrix-row\";\n  var matrixRowsWrapperSelector = \".questionnaire-question-matrix-rows\";\n  var matrixRowRemoveFieldButtonSelector = \".remove-matrix-row\";\n  var addMatrixRowButtonSelector = \".add-matrix-row\";\n  var maxChoicesWrapperSelector = \".questionnaire-question-max-choices\";\n  var displayConditionFieldSelector = \".questionnaire-question-display-condition\";\n  var displayConditionsWrapperSelector = \".questionnaire-question-display-conditions\";\n  var displayConditionRemoveFieldButtonSelector = \".remove-display-condition\";\n  var displayConditionQuestionSelector = \"select[name$=\\\\[decidim_condition_question_id\\\\]]\";\n  var displayConditionAnswerOptionSelector = \"select[name$=\\\\[decidim_answer_option_id\\\\]]\";\n  var displayConditionTypeSelector = \"select[name$=\\\\[condition_type\\\\]]\";\n  var deletedInputSelector = \"input[name$=\\\\[deleted\\\\]]\";\n  var displayConditionValueWrapperSelector = \".questionnaire-question-display-condition-value\";\n  var displayconditionAnswerOptionWrapperSelector = \".questionnaire-question-display-condition-answer-option\";\n  var addDisplayConditionButtonSelector = \".add-display-condition\";\n  var removeDisplayConditionsForFirstQuestion = function removeDisplayConditionsForFirstQuestion() {\n    $(fieldSelector).each(function (idx, el) {\n      var $question = $(el);\n      if (idx) {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"false\");\n        $question.find(displayConditionsWrapperSelector).show();\n      } else {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"true\");\n        $question.find(displayConditionsWrapperSelector).hide();\n      }\n    });\n  };\n  var autoButtonsByPosition = new AutoButtonsByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    hideOnFirstSelector: \".move-up-question\",\n    hideOnLastSelector: \".move-down-question\"\n  });\n  var autoLabelByPosition = new AutoLabelByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    labelSelector: \".card-title span:first\",\n    onPositionComputed: function onPositionComputed(el, idx) {\n      $(el).find(\"input[name$=\\\\[position\\\\]]:not([name*=\\\\[matrix_rows\\\\]])\").val(idx);\n      autoButtonsByPosition.run();\n      removeDisplayConditionsForFirstQuestion();\n    }\n  });\n  var MULTIPLE_CHOICE_VALUES = [\"single_option\", \"multiple_option\", \"sorting\", \"matrix_single\", \"matrix_multiple\"];\n  var MATRIX_VALUES = [\"matrix_single\", \"matrix_multiple\"];\n  var createAutoMaxChoicesByNumberOfAnswerOptions = function createAutoMaxChoicesByNumberOfAnswerOptions(fieldId) {\n    return new AutoSelectOptionsByTotalItemsComponent({\n      wrapperSelector: fieldSelector,\n      selectSelector: \"\".concat(maxChoicesWrapperSelector, \" select\"),\n      listSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector, \" .questionnaire-question-answer-option:not(.hidden)\")\n    });\n  };\n  var createAutoButtonsByMinItemsForAnswerOptions = function createAutoButtonsByMinItemsForAnswerOptions(fieldId) {\n    return new AutoButtonsByMinItemsComponent({\n      wrapperSelector: fieldSelector,\n      listSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector, \" .questionnaire-question-answer-option:not(.hidden)\"),\n      minItems: 2,\n      hideOnMinItemsOrLessSelector: answerOptionRemoveFieldButtonSelector\n    });\n  };\n  var createAutoSelectOptionsFromUrl = function createAutoSelectOptionsFromUrl($field) {\n    return new AutoSelectOptionsFromUrl({\n      source: $field.find(displayConditionQuestionSelector),\n      select: $field.find(displayConditionAnswerOptionSelector),\n      sourceToParams: function sourceToParams($element) {\n        return {\n          id: $element.val()\n        };\n      }\n    });\n  };\n  var createSortableList = function createSortableList() {\n    createSortList(\".questionnaire-questions-list:not(.published)\", {\n      handle: \".question-divider\",\n      placeholder: '<div style=\"border-style: dashed; border-color: #000\"></div>',\n      forcePlaceholderSize: true,\n      onSortUpdate: function onSortUpdate() {\n        autoLabelByPosition.run();\n        autoButtonsByPosition.run();\n      }\n    });\n  };\n  var createDynamicQuestionTitle = function createDynamicQuestionTitle(fieldId) {\n    var targetSelector = \"#\".concat(fieldId, \" .question-title-statement\");\n    var locale = $(targetSelector).data(\"locale\");\n    var maxLength = $(targetSelector).data(\"max-length\");\n    var omission = $(targetSelector).data(\"omission\");\n    var placeholder = $(targetSelector).data(\"placeholder\");\n    return createLiveTextUpdateComponent({\n      inputSelector: \"#\".concat(fieldId, \" input[name$=\\\\[body_\").concat(locale, \"\\\\]]\"),\n      targetSelector: targetSelector,\n      maxLength: maxLength,\n      omission: omission,\n      placeholder: placeholder\n    });\n  };\n  var createCollapsibleQuestion = function createCollapsibleQuestion($target) {\n    var $collapsible = $target.find(\".collapsible\");\n    if ($collapsible.length > 0) {\n      var collapsibleId = $collapsible.attr(\"id\").replace(\"-question-card\", \"\");\n      var toggleAttr = \"\".concat(collapsibleId, \"-question-card button--collapse-question-\").concat(collapsibleId, \" button--expand-question-\").concat(collapsibleId);\n      $target.find(\".question--collapse\").data(\"toggle\", toggleAttr);\n    }\n  };\n  var createDynamicFieldsForAnswerOptions = function createDynamicFieldsForAnswerOptions(fieldId) {\n    var autoButtons = createAutoButtonsByMinItemsForAnswerOptions(fieldId);\n    var autoSelectOptions = createAutoMaxChoicesByNumberOfAnswerOptions(fieldId);\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-answer-option-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(answerOptionsWrapperSelector),\n      containerSelector: \".questionnaire-question-answer-options-list\",\n      fieldSelector: answerOptionFieldSelector,\n      addFieldButtonSelector: \".add-answer-option\",\n      fieldTemplateSelector: \".decidim-answer-option-template\",\n      removeFieldButtonSelector: answerOptionRemoveFieldButtonSelector,\n      onAddField: function onAddField() {\n        autoButtons.run();\n        autoSelectOptions.run();\n      },\n      onRemoveField: function onRemoveField() {\n        autoButtons.run();\n        autoSelectOptions.run();\n      }\n    });\n  };\n  var dynamicFieldsForAnswerOptions = {};\n  var createDynamicFieldsForMatrixRows = function createDynamicFieldsForMatrixRows(fieldId) {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-matrix-row-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(matrixRowsWrapperSelector),\n      containerSelector: \".questionnaire-question-matrix-rows-list\",\n      fieldSelector: matrixRowFieldSelector,\n      addFieldButtonSelector: addMatrixRowButtonSelector,\n      fieldTemplateSelector: \".decidim-matrix-row-template\",\n      removeFieldButtonSelector: matrixRowRemoveFieldButtonSelector,\n      onAddField: function onAddField() {},\n      onRemoveField: function onRemoveField() {}\n    });\n  };\n  var dynamicFieldsForMatrixRows = {};\n  var isMultipleChoiceOption = function isMultipleChoiceOption(value) {\n    return MULTIPLE_CHOICE_VALUES.indexOf(value) >= 0;\n  };\n  var isMatrix = function isMatrix(value) {\n    return MATRIX_VALUES.indexOf(value) >= 0;\n  };\n  var getSelectedQuestionType = function getSelectedQuestionType(select) {\n    var selectedOption = select.options[select.selectedIndex];\n    return $(selectedOption).data(\"type\");\n  };\n  var onDisplayConditionQuestionChange = function onDisplayConditionQuestionChange($field) {\n    var $questionSelector = $field.find(displayConditionQuestionSelector);\n    var selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n    var isMultiple = isMultipleChoiceOption(selectedQuestionType);\n    var conditionTypes = [\"answered\", \"not_answered\"];\n    if (isMultiple) {\n      conditionTypes.push(\"equal\");\n      conditionTypes.push(\"not_equal\");\n    }\n    conditionTypes.push(\"match\");\n    var $conditionTypeSelect = $field.find(displayConditionTypeSelector);\n    $conditionTypeSelect.find(\"option\").each(function (idx, option) {\n      var $option = $(option);\n      var value = $option.val();\n      if (!value) {\n        return;\n      }\n      $option.show();\n      if (conditionTypes.indexOf(value) < 0) {\n        $option.hide();\n      }\n    });\n    if (conditionTypes.indexOf($conditionTypeSelect.val()) < 0) {\n      $conditionTypeSelect.val(conditionTypes[0]);\n    }\n    $conditionTypeSelect.trigger(\"change\");\n  };\n  var onDisplayConditionTypeChange = function onDisplayConditionTypeChange($field) {\n    var value = $field.find(displayConditionTypeSelector).val();\n    var $valueWrapper = $field.find(displayConditionValueWrapperSelector);\n    var $answerOptionWrapper = $field.find(displayconditionAnswerOptionWrapperSelector);\n    var $questionSelector = $field.find(displayConditionQuestionSelector);\n    var selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n    var isMultiple = isMultipleChoiceOption(selectedQuestionType);\n    if (value === \"match\") {\n      $valueWrapper.show();\n    } else {\n      $valueWrapper.hide();\n    }\n    if (isMultiple && (value === \"not_equal\" || value === \"equal\")) {\n      $answerOptionWrapper.show();\n    } else {\n      $answerOptionWrapper.hide();\n    }\n  };\n  var initializeDisplayConditionField = function initializeDisplayConditionField($field) {\n    var autoSelectByUrl = createAutoSelectOptionsFromUrl($field);\n    autoSelectByUrl.run();\n    $field.find(displayConditionQuestionSelector).on(\"change\", function () {\n      onDisplayConditionQuestionChange($field);\n    });\n    $field.find(displayConditionTypeSelector).on(\"change\", function () {\n      onDisplayConditionTypeChange($field);\n    });\n    onDisplayConditionTypeChange($field);\n    onDisplayConditionQuestionChange($field);\n  };\n  var createDynamicFieldsForDisplayConditions = function createDynamicFieldsForDisplayConditions(fieldId) {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-display-condition-id\",\n      wrapperSelector: \"#\".concat(fieldId, \" \").concat(displayConditionsWrapperSelector),\n      containerSelector: \".questionnaire-question-display-conditions-list\",\n      fieldSelector: displayConditionFieldSelector,\n      addFieldButtonSelector: addDisplayConditionButtonSelector,\n      removeFieldButtonSelector: displayConditionRemoveFieldButtonSelector,\n      onAddField: function onAddField($field) {\n        initializeDisplayConditionField($field);\n      },\n      onRemoveField: function onRemoveField() {}\n    });\n  };\n  var dynamicFieldsForDisplayConditions = {};\n  var setupInitialQuestionAttributes = function setupInitialQuestionAttributes($target) {\n    var fieldId = $target.attr(\"id\");\n    var $fieldQuestionTypeSelect = $target.find(questionTypeSelector);\n    createCollapsibleQuestion($target);\n    createDynamicQuestionTitle(fieldId);\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: answerOptionsWrapperSelector,\n      dependentInputSelector: \"\".concat(answerOptionFieldSelector, \" input\"),\n      enablingCondition: function enablingCondition($field) {\n        return isMultipleChoiceOption($field.val());\n      }\n    });\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: maxChoicesWrapperSelector,\n      dependentInputSelector: \"select\",\n      enablingCondition: function enablingCondition($field) {\n        return $field.val() === \"multiple_option\" || $field.val() === \"matrix_multiple\";\n      }\n    });\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: matrixRowsWrapperSelector,\n      dependentInputSelector: \"\".concat(matrixRowFieldSelector, \" input\"),\n      enablingCondition: function enablingCondition($field) {\n        return isMatrix($field.val());\n      }\n    });\n    dynamicFieldsForAnswerOptions[fieldId] = createDynamicFieldsForAnswerOptions(fieldId);\n    dynamicFieldsForMatrixRows[fieldId] = createDynamicFieldsForMatrixRows(fieldId);\n    dynamicFieldsForDisplayConditions[fieldId] = createDynamicFieldsForDisplayConditions(fieldId);\n    var dynamicFieldsAnswerOptions = dynamicFieldsForAnswerOptions[fieldId];\n    var dynamicFieldsMatrixRows = dynamicFieldsForMatrixRows[fieldId];\n    var onQuestionTypeChange = function onQuestionTypeChange() {\n      if (isMultipleChoiceOption($fieldQuestionTypeSelect.val())) {\n        var nOptions = $fieldQuestionTypeSelect.parents(fieldSelector).find(answerOptionFieldSelector).length;\n        if (nOptions === 0) {\n          dynamicFieldsAnswerOptions._addField();\n          dynamicFieldsAnswerOptions._addField();\n        }\n      }\n      if (isMatrix($fieldQuestionTypeSelect.val())) {\n        var nRows = $fieldQuestionTypeSelect.parents(fieldSelector).find(matrixRowFieldSelector).length;\n        if (nRows === 0) {\n          dynamicFieldsMatrixRows._addField();\n          dynamicFieldsMatrixRows._addField();\n        }\n      }\n    };\n    $fieldQuestionTypeSelect.on(\"change\", onQuestionTypeChange);\n    onQuestionTypeChange();\n  };\n  var hideDeletedQuestion = function hideDeletedQuestion($target) {\n    var inputDeleted = $target.find(\"input[name$=\\\\[deleted\\\\]]\").val();\n    if (inputDeleted === \"true\") {\n      $target.addClass(\"hidden\");\n      $target.hide();\n    }\n  };\n  createDynamicFields({\n    placeholderId: \"questionnaire-question-id\",\n    wrapperSelector: wrapperSelector,\n    containerSelector: \".questionnaire-questions-list\",\n    fieldSelector: fieldSelector,\n    addFieldButtonSelector: \".add-question\",\n    addSeparatorButtonSelector: \".add-separator\",\n    addTitleAndDescriptionButtonSelector: \".add-title-and-description\",\n    fieldTemplateSelector: \".decidim-question-template\",\n    separatorTemplateSelector: \".decidim-separator-template\",\n    TitleAndDescriptionTemplateSelector: \".decidim-title-and-description-template\",\n    removeFieldButtonSelector: \".remove-question\",\n    moveUpFieldButtonSelector: \".move-up-question\",\n    moveDownFieldButtonSelector: \".move-down-question\",\n    onAddField: function onAddField($field) {\n      setupInitialQuestionAttributes($field);\n      createSortableList();\n      $field.find(\".editor-container\").each(function (idx, el) {\n        createQuillEditor(el);\n      });\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n      initLanguageChangeSelect($field.find(\"select.language-change\").toArray());\n    },\n    onRemoveField: function onRemoveField($field) {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n      $field.find(answerOptionRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForAnswerOptions[$field.attr(\"id\")]._removeField(el);\n      });\n      $field.find(matrixRowRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForMatrixRows[$field.attr(\"id\")]._removeField(el);\n      });\n      $field.find(displayConditionRemoveFieldButtonSelector).each(function (idx, el) {\n        dynamicFieldsForDisplayConditions[$field.attr(\"id\")]._removeField(el);\n      });\n    },\n    onMoveUpField: function onMoveUpField() {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onMoveDownField: function onMoveDownField() {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    }\n  });\n  createSortableList();\n  $(fieldSelector).each(function (idx, el) {\n    var $target = $(el);\n    hideDeletedQuestion($target);\n    setupInitialQuestionAttributes($target);\n  });\n  $(displayConditionFieldSelector).each(function (idx, el) {\n    var $field = $(el);\n    initializeDisplayConditionField($field);\n  });\n  autoLabelByPosition.run();\n  autoButtonsByPosition.run();\n}","map":{"version":3,"names":["AutoButtonsByMinItemsComponent","AutoSelectOptionsByTotalItemsComponent","AutoSelectOptionsFromUrl","createLiveTextUpdateComponent","AutoButtonsByPositionComponent","AutoLabelByPositionComponent","createSortList","createDynamicFields","createFieldDependentInputs","createQuillEditor","initLanguageChangeSelect","createEditableForm","wrapperSelector","fieldSelector","questionTypeSelector","answerOptionFieldSelector","answerOptionsWrapperSelector","answerOptionRemoveFieldButtonSelector","matrixRowFieldSelector","matrixRowsWrapperSelector","matrixRowRemoveFieldButtonSelector","addMatrixRowButtonSelector","maxChoicesWrapperSelector","displayConditionFieldSelector","displayConditionsWrapperSelector","displayConditionRemoveFieldButtonSelector","displayConditionQuestionSelector","displayConditionAnswerOptionSelector","displayConditionTypeSelector","deletedInputSelector","displayConditionValueWrapperSelector","displayconditionAnswerOptionWrapperSelector","addDisplayConditionButtonSelector","removeDisplayConditionsForFirstQuestion","$","each","idx","el","$question","find","val","show","hide","autoButtonsByPosition","listSelector","hideOnFirstSelector","hideOnLastSelector","autoLabelByPosition","labelSelector","onPositionComputed","run","MULTIPLE_CHOICE_VALUES","MATRIX_VALUES","createAutoMaxChoicesByNumberOfAnswerOptions","fieldId","selectSelector","concat","createAutoButtonsByMinItemsForAnswerOptions","minItems","hideOnMinItemsOrLessSelector","createAutoSelectOptionsFromUrl","$field","source","select","sourceToParams","$element","id","createSortableList","handle","placeholder","forcePlaceholderSize","onSortUpdate","createDynamicQuestionTitle","targetSelector","locale","data","maxLength","omission","inputSelector","createCollapsibleQuestion","$target","$collapsible","length","collapsibleId","attr","replace","toggleAttr","createDynamicFieldsForAnswerOptions","autoButtons","autoSelectOptions","placeholderId","containerSelector","addFieldButtonSelector","fieldTemplateSelector","removeFieldButtonSelector","onAddField","onRemoveField","dynamicFieldsForAnswerOptions","createDynamicFieldsForMatrixRows","dynamicFieldsForMatrixRows","isMultipleChoiceOption","value","indexOf","isMatrix","getSelectedQuestionType","selectedOption","options","selectedIndex","onDisplayConditionQuestionChange","$questionSelector","selectedQuestionType","isMultiple","conditionTypes","push","$conditionTypeSelect","option","$option","trigger","onDisplayConditionTypeChange","$valueWrapper","$answerOptionWrapper","initializeDisplayConditionField","autoSelectByUrl","on","createDynamicFieldsForDisplayConditions","dynamicFieldsForDisplayConditions","setupInitialQuestionAttributes","$fieldQuestionTypeSelect","controllerField","dependentFieldsSelector","dependentInputSelector","enablingCondition","dynamicFieldsAnswerOptions","dynamicFieldsMatrixRows","onQuestionTypeChange","nOptions","parents","_addField","nRows","hideDeletedQuestion","inputDeleted","addClass","addSeparatorButtonSelector","addTitleAndDescriptionButtonSelector","separatorTemplateSelector","TitleAndDescriptionTemplateSelector","moveUpFieldButtonSelector","moveDownFieldButtonSelector","toArray","_removeField","onMoveUpField","onMoveDownField"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-forms-0.27.3/app/packs/src/decidim/forms/admin/forms.js"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable require-jsdoc */\n\nimport AutoButtonsByMinItemsComponent from \"src/decidim/forms/admin/auto_buttons_by_min_items.component\"\nimport AutoSelectOptionsByTotalItemsComponent from \"src/decidim/forms/admin/auto_select_options_by_total_items.component\"\nimport AutoSelectOptionsFromUrl from \"src/decidim/forms/admin/auto_select_options_from_url.component\"\nimport createLiveTextUpdateComponent from \"src/decidim/forms/admin/live_text_update.component\"\nimport AutoButtonsByPositionComponent from \"src/decidim/admin/auto_buttons_by_position.component\"\nimport AutoLabelByPositionComponent from \"src/decidim/admin/auto_label_by_position.component\"\nimport createSortList from \"src/decidim/admin/sort_list.component\"\nimport createDynamicFields from \"src/decidim/admin/dynamic_fields.component\"\nimport createFieldDependentInputs from \"src/decidim/admin/field_dependent_inputs.component\"\nimport createQuillEditor from \"src/decidim/editor\"\nimport initLanguageChangeSelect from \"src/decidim/admin/choose_language\"\n\nexport default function createEditableForm() {\n  const wrapperSelector = \".questionnaire-questions\";\n  const fieldSelector = \".questionnaire-question\";\n  const questionTypeSelector = \"select[name$=\\\\[question_type\\\\]]\";\n  const answerOptionFieldSelector = \".questionnaire-question-answer-option\";\n  const answerOptionsWrapperSelector = \".questionnaire-question-answer-options\";\n  const answerOptionRemoveFieldButtonSelector = \".remove-answer-option\";\n  const matrixRowFieldSelector = \".questionnaire-question-matrix-row\";\n  const matrixRowsWrapperSelector = \".questionnaire-question-matrix-rows\";\n  const matrixRowRemoveFieldButtonSelector = \".remove-matrix-row\";\n  const addMatrixRowButtonSelector = \".add-matrix-row\";\n  const maxChoicesWrapperSelector = \".questionnaire-question-max-choices\";\n\n  const displayConditionFieldSelector = \".questionnaire-question-display-condition\";\n  const displayConditionsWrapperSelector = \".questionnaire-question-display-conditions\";\n  const displayConditionRemoveFieldButtonSelector = \".remove-display-condition\";\n\n  const displayConditionQuestionSelector = \"select[name$=\\\\[decidim_condition_question_id\\\\]]\";\n  const displayConditionAnswerOptionSelector = \"select[name$=\\\\[decidim_answer_option_id\\\\]]\";\n  const displayConditionTypeSelector = \"select[name$=\\\\[condition_type\\\\]]\";\n  const deletedInputSelector = \"input[name$=\\\\[deleted\\\\]]\";\n\n  const displayConditionValueWrapperSelector = \".questionnaire-question-display-condition-value\";\n  const displayconditionAnswerOptionWrapperSelector = \".questionnaire-question-display-condition-answer-option\";\n\n  const addDisplayConditionButtonSelector = \".add-display-condition\";\n\n  const removeDisplayConditionsForFirstQuestion = () => {\n    $(fieldSelector).each((idx, el) => {\n      const $question = $(el);\n      if (idx) {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"false\");\n        $question.find(displayConditionsWrapperSelector).show();\n      }\n      else {\n        $question.find(displayConditionsWrapperSelector).find(deletedInputSelector).val(\"true\");\n        $question.find(displayConditionsWrapperSelector).hide();\n      }\n    });\n  };\n\n  const autoButtonsByPosition = new AutoButtonsByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    hideOnFirstSelector: \".move-up-question\",\n    hideOnLastSelector: \".move-down-question\"\n  });\n\n  const autoLabelByPosition = new AutoLabelByPositionComponent({\n    listSelector: \".questionnaire-question:not(.hidden)\",\n    labelSelector: \".card-title span:first\",\n    onPositionComputed: (el, idx) => {\n      $(el).find(\"input[name$=\\\\[position\\\\]]:not([name*=\\\\[matrix_rows\\\\]])\").val(idx);\n\n      autoButtonsByPosition.run();\n\n      removeDisplayConditionsForFirstQuestion();\n    }\n  });\n\n  const MULTIPLE_CHOICE_VALUES = [\"single_option\", \"multiple_option\", \"sorting\", \"matrix_single\", \"matrix_multiple\"];\n  const MATRIX_VALUES = [\"matrix_single\", \"matrix_multiple\"];\n\n  const createAutoMaxChoicesByNumberOfAnswerOptions = (fieldId) => {\n    return new AutoSelectOptionsByTotalItemsComponent({\n      wrapperSelector: fieldSelector,\n      selectSelector: `${maxChoicesWrapperSelector} select`,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`\n    })\n  };\n\n  const createAutoButtonsByMinItemsForAnswerOptions = (fieldId) => {\n    return new AutoButtonsByMinItemsComponent({\n      wrapperSelector: fieldSelector,\n      listSelector: `#${fieldId} ${answerOptionsWrapperSelector} .questionnaire-question-answer-option:not(.hidden)`,\n      minItems: 2,\n      hideOnMinItemsOrLessSelector: answerOptionRemoveFieldButtonSelector\n    })\n  };\n\n  const createAutoSelectOptionsFromUrl = ($field) => {\n    return new AutoSelectOptionsFromUrl({\n      source: $field.find(displayConditionQuestionSelector),\n      select: $field.find(displayConditionAnswerOptionSelector),\n      sourceToParams: ($element) => { return { id: $element.val() } }\n    })\n  };\n\n  const createSortableList = () => {\n    createSortList(\".questionnaire-questions-list:not(.published)\", {\n      handle: \".question-divider\",\n      placeholder: '<div style=\"border-style: dashed; border-color: #000\"></div>',\n      forcePlaceholderSize: true,\n      onSortUpdate: () => {\n        autoLabelByPosition.run();\n        autoButtonsByPosition.run();\n      }\n    });\n  };\n\n  const createDynamicQuestionTitle = (fieldId) => {\n    const targetSelector = `#${fieldId} .question-title-statement`;\n    const locale = $(targetSelector).data(\"locale\");\n    const maxLength = $(targetSelector).data(\"max-length\");\n    const omission = $(targetSelector).data(\"omission\");\n    const placeholder = $(targetSelector).data(\"placeholder\");\n\n    return createLiveTextUpdateComponent({\n      inputSelector: `#${fieldId} input[name$=\\\\[body_${locale}\\\\]]`,\n      targetSelector: targetSelector,\n      maxLength: maxLength,\n      omission: omission,\n      placeholder: placeholder\n    });\n  }\n\n  const createCollapsibleQuestion = ($target) => {\n    const $collapsible = $target.find(\".collapsible\");\n    if ($collapsible.length > 0) {\n      const collapsibleId = $collapsible.attr(\"id\").replace(\"-question-card\", \"\");\n      const toggleAttr = `${collapsibleId}-question-card button--collapse-question-${collapsibleId} button--expand-question-${collapsibleId}`;\n      $target.find(\".question--collapse\").data(\"toggle\", toggleAttr);\n    }\n  };\n\n  const createDynamicFieldsForAnswerOptions = (fieldId) => {\n    const autoButtons = createAutoButtonsByMinItemsForAnswerOptions(fieldId);\n    const autoSelectOptions = createAutoMaxChoicesByNumberOfAnswerOptions(fieldId);\n\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-answer-option-id\",\n      wrapperSelector: `#${fieldId} ${answerOptionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-answer-options-list\",\n      fieldSelector: answerOptionFieldSelector,\n      addFieldButtonSelector: \".add-answer-option\",\n      fieldTemplateSelector: \".decidim-answer-option-template\",\n      removeFieldButtonSelector: answerOptionRemoveFieldButtonSelector,\n      onAddField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      },\n      onRemoveField: () => {\n        autoButtons.run();\n        autoSelectOptions.run();\n      }\n    });\n  };\n\n  const dynamicFieldsForAnswerOptions = {};\n\n  const createDynamicFieldsForMatrixRows = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-matrix-row-id\",\n      wrapperSelector: `#${fieldId} ${matrixRowsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-matrix-rows-list\",\n      fieldSelector: matrixRowFieldSelector,\n      addFieldButtonSelector: addMatrixRowButtonSelector,\n      fieldTemplateSelector: \".decidim-matrix-row-template\",\n      removeFieldButtonSelector: matrixRowRemoveFieldButtonSelector,\n      onAddField: () => {\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForMatrixRows = {};\n\n  const isMultipleChoiceOption = (value) => {\n    return MULTIPLE_CHOICE_VALUES.indexOf(value) >= 0;\n  }\n\n  const isMatrix = (value) => {\n    return MATRIX_VALUES.indexOf(value) >= 0;\n  }\n\n  const getSelectedQuestionType = (select) => {\n    const selectedOption = select.options[select.selectedIndex];\n    return $(selectedOption).data(\"type\");\n  };\n\n  const onDisplayConditionQuestionChange = ($field) => {\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    let conditionTypes = [\"answered\", \"not_answered\"];\n\n    if (isMultiple) {\n      conditionTypes.push(\"equal\");\n      conditionTypes.push(\"not_equal\");\n    }\n\n    conditionTypes.push(\"match\");\n\n    const $conditionTypeSelect = $field.find(displayConditionTypeSelector);\n\n    $conditionTypeSelect.find(\"option\").each((idx, option) => {\n      const $option = $(option);\n      const value = $option.val();\n\n      if (!value) {\n        return;\n      }\n\n      $option.show();\n\n      if (conditionTypes.indexOf(value) < 0) {\n        $option.hide();\n      }\n    });\n\n    if (conditionTypes.indexOf($conditionTypeSelect.val()) < 0) {\n      $conditionTypeSelect.val(conditionTypes[0]);\n    }\n\n    $conditionTypeSelect.trigger(\"change\");\n  };\n\n  const onDisplayConditionTypeChange = ($field) => {\n    const value = $field.find(displayConditionTypeSelector).val();\n    const $valueWrapper = $field.find(displayConditionValueWrapperSelector);\n    const $answerOptionWrapper = $field.find(displayconditionAnswerOptionWrapperSelector);\n\n    const $questionSelector = $field.find(displayConditionQuestionSelector);\n    const selectedQuestionType = getSelectedQuestionType($questionSelector[0]);\n\n    const isMultiple = isMultipleChoiceOption(selectedQuestionType);\n\n    if (value === \"match\") {\n      $valueWrapper.show();\n    }\n    else {\n      $valueWrapper.hide();\n    }\n\n    if (isMultiple && (value === \"not_equal\" || value === \"equal\")) {\n      $answerOptionWrapper.show();\n    }\n    else {\n      $answerOptionWrapper.hide();\n    }\n  };\n\n  const initializeDisplayConditionField = ($field) => {\n    const autoSelectByUrl = createAutoSelectOptionsFromUrl($field);\n    autoSelectByUrl.run();\n\n    $field.find(displayConditionQuestionSelector).on(\"change\", () => {\n      onDisplayConditionQuestionChange($field);\n    });\n\n    $field.find(displayConditionTypeSelector).on(\"change\", () => {\n      onDisplayConditionTypeChange($field);\n    });\n\n    onDisplayConditionTypeChange($field);\n    onDisplayConditionQuestionChange($field);\n  }\n\n  const createDynamicFieldsForDisplayConditions = (fieldId) => {\n    return createDynamicFields({\n      placeholderId: \"questionnaire-question-display-condition-id\",\n      wrapperSelector: `#${fieldId} ${displayConditionsWrapperSelector}`,\n      containerSelector: \".questionnaire-question-display-conditions-list\",\n      fieldSelector: displayConditionFieldSelector,\n      addFieldButtonSelector: addDisplayConditionButtonSelector,\n      removeFieldButtonSelector: displayConditionRemoveFieldButtonSelector,\n      onAddField: ($field) => {\n        initializeDisplayConditionField($field);\n      },\n      onRemoveField: () => {\n      }\n    });\n  };\n\n  const dynamicFieldsForDisplayConditions = {};\n\n  const setupInitialQuestionAttributes = ($target) => {\n    const fieldId = $target.attr(\"id\");\n    const $fieldQuestionTypeSelect = $target.find(questionTypeSelector);\n\n    createCollapsibleQuestion($target);\n    createDynamicQuestionTitle(fieldId);\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: answerOptionsWrapperSelector,\n      dependentInputSelector: `${answerOptionFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMultipleChoiceOption($field.val());\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: maxChoicesWrapperSelector,\n      dependentInputSelector: \"select\",\n      enablingCondition: ($field) => {\n        return $field.val() === \"multiple_option\" || $field.val() === \"matrix_multiple\";\n      }\n    });\n\n    createFieldDependentInputs({\n      controllerField: $fieldQuestionTypeSelect,\n      wrapperSelector: fieldSelector,\n      dependentFieldsSelector: matrixRowsWrapperSelector,\n      dependentInputSelector: `${matrixRowFieldSelector} input`,\n      enablingCondition: ($field) => {\n        return isMatrix($field.val());\n      }\n    });\n\n    dynamicFieldsForAnswerOptions[fieldId] = createDynamicFieldsForAnswerOptions(fieldId);\n    dynamicFieldsForMatrixRows[fieldId] = createDynamicFieldsForMatrixRows(fieldId);\n    dynamicFieldsForDisplayConditions[fieldId] = createDynamicFieldsForDisplayConditions(fieldId);\n\n    const dynamicFieldsAnswerOptions = dynamicFieldsForAnswerOptions[fieldId];\n    const dynamicFieldsMatrixRows = dynamicFieldsForMatrixRows[fieldId];\n\n    const onQuestionTypeChange = () => {\n      if (isMultipleChoiceOption($fieldQuestionTypeSelect.val())) {\n        const nOptions = $fieldQuestionTypeSelect.parents(fieldSelector).find(answerOptionFieldSelector).length;\n\n        if (nOptions === 0) {\n          dynamicFieldsAnswerOptions._addField();\n          dynamicFieldsAnswerOptions._addField();\n        }\n      }\n\n      if (isMatrix($fieldQuestionTypeSelect.val())) {\n        const nRows = $fieldQuestionTypeSelect.parents(fieldSelector).find(matrixRowFieldSelector).length;\n\n        if (nRows === 0) {\n          dynamicFieldsMatrixRows._addField();\n          dynamicFieldsMatrixRows._addField();\n        }\n      }\n    };\n\n    $fieldQuestionTypeSelect.on(\"change\", onQuestionTypeChange);\n\n    onQuestionTypeChange();\n  }\n\n  const hideDeletedQuestion = ($target) => {\n    const inputDeleted = $target.find(\"input[name$=\\\\[deleted\\\\]]\").val();\n\n    if (inputDeleted === \"true\") {\n      $target.addClass(\"hidden\");\n      $target.hide();\n    }\n  }\n\n  createDynamicFields({\n    placeholderId: \"questionnaire-question-id\",\n    wrapperSelector: wrapperSelector,\n    containerSelector: \".questionnaire-questions-list\",\n    fieldSelector: fieldSelector,\n    addFieldButtonSelector: \".add-question\",\n    addSeparatorButtonSelector: \".add-separator\",\n    addTitleAndDescriptionButtonSelector: \".add-title-and-description\",\n    fieldTemplateSelector: \".decidim-question-template\",\n    separatorTemplateSelector: \".decidim-separator-template\",\n    TitleAndDescriptionTemplateSelector: \".decidim-title-and-description-template\",\n    removeFieldButtonSelector: \".remove-question\",\n    moveUpFieldButtonSelector: \".move-up-question\",\n    moveDownFieldButtonSelector: \".move-down-question\",\n    onAddField: ($field) => {\n      setupInitialQuestionAttributes($field);\n      createSortableList();\n\n      $field.find(\".editor-container\").each((idx, el) => {\n        createQuillEditor(el);\n      });\n\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n\n      initLanguageChangeSelect($field.find(\"select.language-change\").toArray());\n    },\n    onRemoveField: ($field) => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n\n      $field.find(answerOptionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForAnswerOptions[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(matrixRowRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForMatrixRows[$field.attr(\"id\")]._removeField(el);\n      });\n\n      $field.find(displayConditionRemoveFieldButtonSelector).each((idx, el) => {\n        dynamicFieldsForDisplayConditions[$field.attr(\"id\")]._removeField(el);\n      });\n    },\n    onMoveUpField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    },\n    onMoveDownField: () => {\n      autoLabelByPosition.run();\n      autoButtonsByPosition.run();\n    }\n  });\n\n  createSortableList();\n\n  $(fieldSelector).each((idx, el) => {\n    const $target = $(el);\n\n    hideDeletedQuestion($target);\n    setupInitialQuestionAttributes($target);\n  });\n\n  $(displayConditionFieldSelector).each((idx, el) => {\n    const $field = $(el);\n    initializeDisplayConditionField($field)\n  });\n\n  autoLabelByPosition.run();\n  autoButtonsByPosition.run();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}