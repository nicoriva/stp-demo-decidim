{"ast":null,"code":"/**\n * Initializes the edit account form to control the password field elements\n * which should only be required when they are visible.\n *\n * @returns {void}\n */\nvar initializeAccountForm = function initializeAccountForm() {\n  var editUserForm = document.querySelector(\"form.edit_user\");\n  if (!editUserForm) {\n    return;\n  }\n  var passwordChange = editUserForm.querySelector(\"#passwordChange\");\n  if (!passwordChange) {\n    return;\n  }\n  var passwordFields = passwordChange.querySelectorAll(\"input[type='password']\");\n  if (passwordFields.length < 1) {\n    return;\n  }\n\n  // Foundation uses jQuery so these have to be bound using jQuery and the\n  // attribute value needs to be set through jQuery.\n  var togglePasswordFieldValidators = function togglePasswordFieldValidators(enabled) {\n    $(passwordFields).attr(\"required\", enabled);\n    if (!enabled) {\n      passwordFields.forEach(function (field) {\n        return field.value = \"\";\n      });\n    }\n  };\n  $(passwordChange).on(\"on.zf.toggler\", function () {\n    togglePasswordFieldValidators(true);\n  });\n  $(passwordChange).on(\"off.zf.toggler\", function () {\n    togglePasswordFieldValidators(false);\n  });\n  togglePasswordFieldValidators(false);\n};\n\n/**\n * Since the delete account has a modal to confirm it we need to copy the content of the\n * reason field to the hidden field in the form inside the modal.\n *\n * @return {void}\n */\nvar initializeDeleteAccount = function initializeDeleteAccount() {\n  var $deleteAccountForm = $(\".delete-account\");\n  var $deleteAccountModalForm = $(\".delete-account-modal\");\n  if ($deleteAccountForm.length < 1) {\n    return;\n  }\n  var $openModalButton = $(\".open-modal-button\");\n  var $modal = $(\"#deleteConfirm\");\n  $openModalButton.on(\"click\", function (event) {\n    try {\n      var reasonValue = $deleteAccountForm.find(\"textarea#delete_account_delete_reason\").val();\n      $deleteAccountModalForm.find(\"input#delete_account_delete_reason\").val(reasonValue);\n      $modal.foundation(\"open\");\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    return false;\n  });\n};\n$(function () {\n  initializeAccountForm();\n  initializeDeleteAccount();\n});","map":{"version":3,"names":["initializeAccountForm","editUserForm","document","querySelector","passwordChange","passwordFields","querySelectorAll","length","togglePasswordFieldValidators","enabled","$","attr","forEach","field","value","on","initializeDeleteAccount","$deleteAccountForm","$deleteAccountModalForm","$openModalButton","$modal","event","reasonValue","find","val","foundation","error","console","preventDefault","stopPropagation"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/account_form.js"],"sourcesContent":["/**\n * Initializes the edit account form to control the password field elements\n * which should only be required when they are visible.\n *\n * @returns {void}\n */\nconst initializeAccountForm = () => {\n  const editUserForm = document.querySelector(\"form.edit_user\");\n  if (!editUserForm) {\n    return;\n  }\n\n  const passwordChange = editUserForm.querySelector(\"#passwordChange\");\n  if (!passwordChange) {\n    return;\n  }\n\n  const passwordFields = passwordChange.querySelectorAll(\"input[type='password']\");\n  if (passwordFields.length < 1) {\n    return;\n  }\n\n  // Foundation uses jQuery so these have to be bound using jQuery and the\n  // attribute value needs to be set through jQuery.\n  const togglePasswordFieldValidators = (enabled) => {\n    $(passwordFields).attr(\"required\", enabled);\n\n    if (!enabled) {\n      passwordFields.forEach((field) => (field.value = \"\"));\n    }\n  }\n\n  $(passwordChange).on(\"on.zf.toggler\", () => {\n    togglePasswordFieldValidators(true);\n  });\n  $(passwordChange).on(\"off.zf.toggler\", () => {\n    togglePasswordFieldValidators(false);\n  });\n  togglePasswordFieldValidators(false);\n};\n\n/**\n * Since the delete account has a modal to confirm it we need to copy the content of the\n * reason field to the hidden field in the form inside the modal.\n *\n * @return {void}\n */\nconst initializeDeleteAccount = () => {\n  const $deleteAccountForm = $(\".delete-account\");\n  const $deleteAccountModalForm = $(\".delete-account-modal\");\n\n  if ($deleteAccountForm.length < 1) {\n    return;\n  }\n\n  const $openModalButton = $(\".open-modal-button\");\n  const $modal = $(\"#deleteConfirm\");\n\n  $openModalButton.on(\"click\", (event) => {\n    try {\n      const reasonValue = $deleteAccountForm.find(\"textarea#delete_account_delete_reason\").val();\n      $deleteAccountModalForm.find(\"input#delete_account_delete_reason\").val(reasonValue);\n      $modal.foundation(\"open\");\n    } catch (error) {\n      console.error(error); // eslint-disable-line no-console\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    return false;\n  });\n};\n\n$(() => {\n  initializeAccountForm();\n  initializeDeleteAccount();\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;EAClC,IAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC;EAC7D,IAAI,CAACF,YAAY,EAAE;IACjB;EACF;EAEA,IAAMG,cAAc,GAAGH,YAAY,CAACE,aAAa,CAAC,iBAAiB,CAAC;EACpE,IAAI,CAACC,cAAc,EAAE;IACnB;EACF;EAEA,IAAMC,cAAc,GAAGD,cAAc,CAACE,gBAAgB,CAAC,wBAAwB,CAAC;EAChF,IAAID,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;IAC7B;EACF;;EAEA;EACA;EACA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAIC,OAAO,EAAK;IACjDC,CAAC,CAACL,cAAc,CAAC,CAACM,IAAI,CAAC,UAAU,EAAEF,OAAO,CAAC;IAE3C,IAAI,CAACA,OAAO,EAAE;MACZJ,cAAc,CAACO,OAAO,CAAC,UAACC,KAAK;QAAA,OAAMA,KAAK,CAACC,KAAK,GAAG,EAAE;MAAA,CAAC,CAAC;IACvD;EACF,CAAC;EAEDJ,CAAC,CAACN,cAAc,CAAC,CAACW,EAAE,CAAC,eAAe,EAAE,YAAM;IAC1CP,6BAA6B,CAAC,IAAI,CAAC;EACrC,CAAC,CAAC;EACFE,CAAC,CAACN,cAAc,CAAC,CAACW,EAAE,CAAC,gBAAgB,EAAE,YAAM;IAC3CP,6BAA6B,CAAC,KAAK,CAAC;EACtC,CAAC,CAAC;EACFA,6BAA6B,CAAC,KAAK,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAMQ,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAS;EACpC,IAAMC,kBAAkB,GAAGP,CAAC,CAAC,iBAAiB,CAAC;EAC/C,IAAMQ,uBAAuB,GAAGR,CAAC,CAAC,uBAAuB,CAAC;EAE1D,IAAIO,kBAAkB,CAACV,MAAM,GAAG,CAAC,EAAE;IACjC;EACF;EAEA,IAAMY,gBAAgB,GAAGT,CAAC,CAAC,oBAAoB,CAAC;EAChD,IAAMU,MAAM,GAAGV,CAAC,CAAC,gBAAgB,CAAC;EAElCS,gBAAgB,CAACJ,EAAE,CAAC,OAAO,EAAE,UAACM,KAAK,EAAK;IACtC,IAAI;MACF,IAAMC,WAAW,GAAGL,kBAAkB,CAACM,IAAI,CAAC,uCAAuC,CAAC,CAACC,GAAG,CAAC,CAAC;MAC1FN,uBAAuB,CAACK,IAAI,CAAC,oCAAoC,CAAC,CAACC,GAAG,CAACF,WAAW,CAAC;MACnFF,MAAM,CAACK,UAAU,CAAC,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;IACxB;;IAEAL,KAAK,CAACO,cAAc,CAAC,CAAC;IACtBP,KAAK,CAACQ,eAAe,CAAC,CAAC;IACvB,OAAO,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AAEDnB,CAAC,CAAC,YAAM;EACNV,qBAAqB,CAAC,CAAC;EACvBgB,uBAAuB,CAAC,CAAC;AAC3B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}