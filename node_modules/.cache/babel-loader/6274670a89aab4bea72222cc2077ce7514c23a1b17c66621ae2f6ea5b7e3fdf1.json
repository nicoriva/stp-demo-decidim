{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n/* eslint max-lines: [\"error\", {\"max\": 350, \"skipBlankLines\": true}] */\n\n/**\n * A plain Javascript component that handles the comments.\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nvar $ = window.$;\nimport Rails from \"@rails/ujs\";\nimport { createCharacterCounter } from \"src/decidim/input_character_counter\";\nimport ExternalLink from \"src/decidim/external_link\";\nimport updateExternalDomainLinks from \"src/decidim/external_domain_warning\";\nvar CommentsComponent = /*#__PURE__*/function () {\n  function CommentsComponent($element, config) {\n    _classCallCheck(this, CommentsComponent);\n    this.$element = $element;\n    this.commentableGid = config.commentableGid;\n    this.commentsUrl = config.commentsUrl;\n    this.rootDepth = config.rootDepth;\n    this.order = config.order;\n    this.lastCommentId = config.lastCommentId;\n    this.pollingInterval = config.pollingInterval || 15000;\n    this.singleComment = config.singleComment;\n    this.toggleTranslations = config.toggleTranslations;\n    this.id = this.$element.attr(\"id\") || this._getUID();\n    this.mounted = false;\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  _createClass(CommentsComponent, [{\n    key: \"mountComponent\",\n    value: function mountComponent() {\n      var _this = this;\n      if (this.$element.length > 0 && !this.mounted) {\n        this.mounted = true;\n        this._initializeComments(this.$element);\n        if (!this.singleComment) {\n          $(\".add-comment textarea\", this.$element).prop(\"disabled\", true);\n          this._fetchComments(function () {\n            $(\".add-comment textarea\", _this.$element).prop(\"disabled\", false);\n          });\n        }\n        $(\".order-by__dropdown .is-submenu-item a\", this.$element).on(\"click.decidim-comments\", function () {\n          return _this._onInitOrder();\n        });\n      }\n    }\n\n    /**\n     * Handles the logic for unmounting the component\n     * @public\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"unmountComponent\",\n    value: function unmountComponent() {\n      var _this2 = this;\n      if (this.mounted) {\n        this.mounted = false;\n        this._stopPolling();\n        $(\".add-comment .opinion-toggle .button\", this.$element).off(\"click.decidim-comments\");\n        $(\".add-comment textarea\", this.$element).off(\"input.decidim-comments\");\n        $(\".order-by__dropdown .is-submenu-item a\", this.$element).off(\"click.decidim-comments\");\n        $(\".add-comment form\", this.$element).off(\"submit.decidim-comments\");\n        $(\".add-comment textarea\", this.$element).each(function (_i, el) {\n          return el.removeEventListener(\"emoji.added\", _this2._onTextInput);\n        });\n      }\n    }\n\n    /**\n     * Adds a new thread to the comments section.\n     * @public\n     * @param {String} threadHtml - The HTML content for the thread.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new thread. Defaults to false.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"addThread\",\n    value: function addThread(threadHtml) {\n      var fromCurrentUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var $parent = $(\".comments:first\", this.$element);\n      var $comment = $(threadHtml);\n      var $threads = $(\".comment-threads\", this.$element);\n      this._addComment($threads, $comment);\n      this._finalizeCommentCreation($parent, fromCurrentUser);\n    }\n\n    /**\n     * Adds a new reply to an existing comment.\n     * @public\n     * @param {Number} commentId - The ID of the comment for which to add the\n     *   reply to.\n     * @param {String} replyHtml - The HTML content for the reply.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new reply. Defaults to false.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"addReply\",\n    value: function addReply(commentId, replyHtml) {\n      var fromCurrentUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var $parent = $(\"#comment_\".concat(commentId));\n      var $comment = $(replyHtml);\n      var $replies = $(\"#comment-\".concat(commentId, \"-replies\"));\n      this._addComment($replies, $comment);\n      $replies.siblings(\".comment__additionalreply\").removeClass(\"hide\");\n      this._finalizeCommentCreation($parent, fromCurrentUser);\n    }\n\n    /**\n     * Generates a unique identifier for the form.\n     * @private\n     * @returns {String} - Returns a unique identifier\n     */\n  }, {\n    key: \"_getUID\",\n    value: function _getUID() {\n      return \"comments-\".concat(new Date().setUTCMilliseconds(), \"-\").concat(Math.floor(Math.random() * 10000000));\n    }\n\n    /**\n     * Initializes the comments for the given parent element.\n     * @private\n     * @param {jQuery} $parent The parent element to initialize.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_initializeComments\",\n    value: function _initializeComments($parent) {\n      var _this3 = this;\n      $(\".add-comment\", $parent).each(function (_i, el) {\n        var $add = $(el);\n        var $form = $(\"form\", $add);\n        var $opinionButtons = $(\".opinion-toggle .button\", $add);\n        var $text = $(\"textarea\", $form);\n        $opinionButtons.on(\"click.decidim-comments\", _this3._onToggleOpinion);\n        $text.on(\"input.decidim-comments\", _this3._onTextInput);\n        $(document).trigger(\"attach-mentions-element\", [$text.get(0)]);\n        $form.on(\"submit.decidim-comments\", function () {\n          var $submit = $(\"button[type='submit']\", $form);\n          $submit.attr(\"disabled\", \"disabled\");\n          _this3._stopPolling();\n        });\n        if ($text.length && $text.get(0) !== null) {\n          // Attach event to the DOM node, instead of the jQuery object\n          $text.get(0).addEventListener(\"emoji.added\", _this3._onTextInput);\n        }\n      });\n    }\n\n    /**\n     * Adds the given comment element to the given target element and\n     * initializes it.\n     * @private\n     * @param {jQuery} $target - The target element to add the comment to.\n     * @param {jQuery} $container - The comment container element to add.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_addComment\",\n    value: function _addComment($target, $container) {\n      var $comment = $(\".comment\", $container);\n      if ($comment.length < 1) {\n        // In case of a reply\n        $comment = $container;\n      }\n      this.lastCommentId = parseInt($comment.data(\"comment-id\"), 10);\n      $target.append($container);\n      $container.foundation();\n      this._initializeComments($container);\n      createCharacterCounter($(\".add-comment textarea\", $container));\n      $container.find('a[target=\"_blank\"]').each(function (_i, elem) {\n        var $link = $(elem);\n        $link.data(\"external-link\", new ExternalLink($link));\n      });\n      updateExternalDomainLinks($container);\n    }\n\n    /**\n     * Finalizes the new comment creation after the comment adding finishes\n     * successfully.\n     * @private\n     * @param {jQuery} $parent - The parent comment element to finalize.\n     * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n     *   herself was the author of the new comment.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_finalizeCommentCreation\",\n    value: function _finalizeCommentCreation($parent, fromCurrentUser) {\n      if (fromCurrentUser) {\n        var $add = $(\"> .add-comment\", $parent);\n        var $text = $(\"textarea\", $add);\n        var characterCounter = $text.data(\"remaining-characters-counter\");\n        $text.val(\"\");\n        if (characterCounter) {\n          characterCounter.updateStatus();\n        }\n        if (!$add.parent().is(\".comments\")) {\n          $add.addClass(\"hide\");\n        }\n      }\n\n      // Restart the polling\n      this._pollComments();\n    }\n\n    /**\n     * Sets a timeout to poll new comments.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_pollComments\",\n    value: function _pollComments() {\n      var _this4 = this;\n      this._stopPolling();\n      this.pollTimeout = setTimeout(function () {\n        _this4._fetchComments();\n      }, this.pollingInterval);\n    }\n\n    /**\n     * Sends an ajax request based on current\n     * params to get comments for the component\n     * @private\n     * @param {Function} successCallback A callback that is called after a\n     *   successful fetch\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_fetchComments\",\n    value: function _fetchComments() {\n      var _this5 = this;\n      var successCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      Rails.ajax({\n        url: this.commentsUrl,\n        type: \"GET\",\n        data: new URLSearchParams(_objectSpread(_objectSpread({\n          \"commentable_gid\": this.commentableGid,\n          \"root_depth\": this.rootDepth,\n          \"order\": this.order,\n          \"after\": this.lastCommentId\n        }, this.toggleTranslations && {\n          \"toggle_translations\": this.toggleTranslations\n        }), this.lastCommentId && {\n          \"after\": this.lastCommentId\n        })),\n        success: function success() {\n          if (successCallback) {\n            successCallback();\n          }\n          _this5._pollComments();\n        }\n      });\n    }\n\n    /**\n     * Stops polling for new comments.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_stopPolling\",\n    value: function _stopPolling() {\n      if (this.pollTimeout) {\n        clearTimeout(this.pollTimeout);\n      }\n    }\n\n    /**\n     * Sets the loading comments element visible in the view.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_setLoading\",\n    value: function _setLoading() {\n      var $container = $(\"> .comments-container\", this.$element);\n      $(\"> .comments\", $container).addClass(\"hide\");\n      $(\"> .loading-comments\", $container).removeClass(\"hide\");\n    }\n\n    /**\n     * Event listener for the ordering links.\n     * @private\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_onInitOrder\",\n    value: function _onInitOrder() {\n      this._stopPolling();\n      this._setLoading();\n    }\n\n    /**\n     * Event listener for the opinion toggle buttons.\n     * @private\n     * @param {Event} ev - The event object.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_onToggleOpinion\",\n    value: function _onToggleOpinion(ev) {\n      var $btn = $(ev.target);\n      if (!$btn.is(\".button\")) {\n        $btn = $btn.parents(\".button\");\n      }\n      var $add = $btn.closest(\".add-comment\");\n      var $form = $(\"form\", $add);\n      var $opinionButtons = $(\".opinion-toggle .button\", $add);\n      var $selectedState = $(\".opinion-toggle .selected-state\", $add);\n      var $alignment = $(\".alignment-input\", $form);\n      $opinionButtons.removeClass(\"is-active\").attr(\"aria-pressed\", \"false\");\n      $btn.addClass(\"is-active\").attr(\"aria-pressed\", \"true\");\n      if ($btn.is(\".opinion-toggle--ok\")) {\n        $alignment.val(1);\n      } else if ($btn.is(\".opinion-toggle--meh\")) {\n        $alignment.val(0);\n      } else if ($btn.is(\".opinion-toggle--ko\")) {\n        $alignment.val(-1);\n      }\n\n      // Announce the selected state for the screen reader\n      $selectedState.text($btn.data(\"selected-label\"));\n    }\n\n    /**\n     * Event listener for the comment field text input.\n     * @private\n     * @param {Event} ev - The event object.\n     * @returns {Void} - Returns nothing\n     */\n  }, {\n    key: \"_onTextInput\",\n    value: function _onTextInput(ev) {\n      var $text = $(ev.target);\n      var $add = $text.closest(\".add-comment\");\n      var $form = $(\"form\", $add);\n      var $submit = $(\"button[type='submit']\", $form);\n      if ($text.val().length > 0) {\n        $submit.removeAttr(\"disabled\");\n      } else {\n        $submit.attr(\"disabled\", \"disabled\");\n      }\n    }\n  }]);\n  return CommentsComponent;\n}();\nexport { CommentsComponent as default };","map":{"version":3,"names":["$","window","Rails","createCharacterCounter","ExternalLink","updateExternalDomainLinks","CommentsComponent","$element","config","_classCallCheck","commentableGid","commentsUrl","rootDepth","order","lastCommentId","pollingInterval","singleComment","toggleTranslations","id","attr","_getUID","mounted","_createClass","key","value","mountComponent","_this","length","_initializeComments","prop","_fetchComments","on","_onInitOrder","unmountComponent","_this2","_stopPolling","off","each","_i","el","removeEventListener","_onTextInput","addThread","threadHtml","fromCurrentUser","arguments","undefined","$parent","$comment","$threads","_addComment","_finalizeCommentCreation","addReply","commentId","replyHtml","concat","$replies","siblings","removeClass","Date","setUTCMilliseconds","Math","floor","random","_this3","$add","$form","$opinionButtons","$text","_onToggleOpinion","document","trigger","get","$submit","addEventListener","$target","$container","parseInt","data","append","foundation","find","elem","$link","characterCounter","val","updateStatus","parent","is","addClass","_pollComments","_this4","pollTimeout","setTimeout","_this5","successCallback","ajax","url","type","URLSearchParams","_objectSpread","success","clearTimeout","_setLoading","ev","$btn","target","parents","closest","$selectedState","$alignment","text","removeAttr","default"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-comments-0.27.3/app/packs/src/decidim/comments/comments.component.js"],"sourcesContent":["/* eslint id-length: [\"error\", { \"exceptions\": [\"$\"] }] */\n/* eslint max-lines: [\"error\", {\"max\": 350, \"skipBlankLines\": true}] */\n\n\n/**\n * A plain Javascript component that handles the comments.\n *\n * @class\n * @augments Component\n */\n\n// This is necessary for testing purposes\nconst $ = window.$;\n\nimport Rails from \"@rails/ujs\";\n\nimport { createCharacterCounter } from \"src/decidim/input_character_counter\"\nimport ExternalLink from \"src/decidim/external_link\"\nimport updateExternalDomainLinks from \"src/decidim/external_domain_warning\"\n\nexport default class CommentsComponent {\n  constructor($element, config) {\n    this.$element = $element;\n    this.commentableGid = config.commentableGid;\n    this.commentsUrl = config.commentsUrl;\n    this.rootDepth = config.rootDepth;\n    this.order = config.order;\n    this.lastCommentId = config.lastCommentId;\n    this.pollingInterval = config.pollingInterval || 15000;\n    this.singleComment = config.singleComment;\n    this.toggleTranslations = config.toggleTranslations;\n    this.id = this.$element.attr(\"id\") || this._getUID();\n    this.mounted = false;\n  }\n\n  /**\n   * Handles the logic for mounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  mountComponent() {\n    if (this.$element.length > 0 && !this.mounted) {\n      this.mounted = true;\n      this._initializeComments(this.$element);\n      if (!this.singleComment) {\n        $(\".add-comment textarea\", this.$element).prop(\"disabled\", true);\n        this._fetchComments(() => {\n          $(\".add-comment textarea\", this.$element).prop(\"disabled\", false);\n        });\n      }\n\n      $(\".order-by__dropdown .is-submenu-item a\", this.$element).on(\"click.decidim-comments\", () => this._onInitOrder());\n    }\n  }\n\n  /**\n   * Handles the logic for unmounting the component\n   * @public\n   * @returns {Void} - Returns nothing\n   */\n  unmountComponent() {\n    if (this.mounted) {\n      this.mounted = false;\n      this._stopPolling();\n\n      $(\".add-comment .opinion-toggle .button\", this.$element).off(\"click.decidim-comments\");\n      $(\".add-comment textarea\", this.$element).off(\"input.decidim-comments\");\n      $(\".order-by__dropdown .is-submenu-item a\", this.$element).off(\"click.decidim-comments\");\n      $(\".add-comment form\", this.$element).off(\"submit.decidim-comments\");\n      $(\".add-comment textarea\", this.$element).each((_i, el) => el.removeEventListener(\"emoji.added\", this._onTextInput));\n    }\n  }\n\n  /**\n   * Adds a new thread to the comments section.\n   * @public\n   * @param {String} threadHtml - The HTML content for the thread.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new thread. Defaults to false.\n   * @returns {Void} - Returns nothing\n   */\n  addThread(threadHtml, fromCurrentUser = false) {\n    const $parent = $(\".comments:first\", this.$element);\n    const $comment = $(threadHtml);\n    const $threads = $(\".comment-threads\", this.$element);\n    this._addComment($threads, $comment);\n    this._finalizeCommentCreation($parent, fromCurrentUser);\n  }\n\n  /**\n   * Adds a new reply to an existing comment.\n   * @public\n   * @param {Number} commentId - The ID of the comment for which to add the\n   *   reply to.\n   * @param {String} replyHtml - The HTML content for the reply.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new reply. Defaults to false.\n   * @returns {Void} - Returns nothing\n   */\n  addReply(commentId, replyHtml, fromCurrentUser = false) {\n    const $parent = $(`#comment_${commentId}`);\n    const $comment = $(replyHtml);\n    const $replies = $(`#comment-${commentId}-replies`);\n    this._addComment($replies, $comment);\n    $replies.siblings(\".comment__additionalreply\").removeClass(\"hide\");\n    this._finalizeCommentCreation($parent, fromCurrentUser);\n  }\n\n  /**\n   * Generates a unique identifier for the form.\n   * @private\n   * @returns {String} - Returns a unique identifier\n   */\n  _getUID() {\n    return `comments-${new Date().setUTCMilliseconds()}-${Math.floor(Math.random() * 10000000)}`;\n  }\n\n  /**\n   * Initializes the comments for the given parent element.\n   * @private\n   * @param {jQuery} $parent The parent element to initialize.\n   * @returns {Void} - Returns nothing\n   */\n  _initializeComments($parent) {\n    $(\".add-comment\", $parent).each((_i, el) => {\n      const $add = $(el);\n      const $form = $(\"form\", $add);\n      const $opinionButtons = $(\".opinion-toggle .button\", $add);\n      const $text = $(\"textarea\", $form);\n\n      $opinionButtons.on(\"click.decidim-comments\", this._onToggleOpinion);\n      $text.on(\"input.decidim-comments\", this._onTextInput);\n\n      $(document).trigger(\"attach-mentions-element\", [$text.get(0)]);\n\n      $form.on(\"submit.decidim-comments\", () => {\n        const $submit = $(\"button[type='submit']\", $form);\n\n        $submit.attr(\"disabled\", \"disabled\");\n        this._stopPolling();\n      });\n\n      if ($text.length && $text.get(0) !== null) {\n        // Attach event to the DOM node, instead of the jQuery object\n        $text.get(0).addEventListener(\"emoji.added\", this._onTextInput);\n      }\n    });\n  }\n\n  /**\n   * Adds the given comment element to the given target element and\n   * initializes it.\n   * @private\n   * @param {jQuery} $target - The target element to add the comment to.\n   * @param {jQuery} $container - The comment container element to add.\n   * @returns {Void} - Returns nothing\n   */\n  _addComment($target, $container) {\n    let $comment = $(\".comment\", $container);\n    if ($comment.length < 1) {\n      // In case of a reply\n      $comment = $container;\n    }\n    this.lastCommentId = parseInt($comment.data(\"comment-id\"), 10);\n\n    $target.append($container);\n    $container.foundation();\n    this._initializeComments($container);\n    createCharacterCounter($(\".add-comment textarea\", $container));\n    $container.find('a[target=\"_blank\"]').each((_i, elem) => {\n      const $link = $(elem);\n      $link.data(\"external-link\", new ExternalLink($link));\n    });\n    updateExternalDomainLinks($container)\n  }\n\n  /**\n   * Finalizes the new comment creation after the comment adding finishes\n   * successfully.\n   * @private\n   * @param {jQuery} $parent - The parent comment element to finalize.\n   * @param {Boolean} fromCurrentUser - A boolean indicating whether the user\n   *   herself was the author of the new comment.\n   * @returns {Void} - Returns nothing\n   */\n  _finalizeCommentCreation($parent, fromCurrentUser) {\n    if (fromCurrentUser) {\n      const $add = $(\"> .add-comment\", $parent);\n      const $text = $(\"textarea\", $add);\n      const characterCounter = $text.data(\"remaining-characters-counter\");\n      $text.val(\"\");\n      if (characterCounter) {\n        characterCounter.updateStatus();\n      }\n      if (!$add.parent().is(\".comments\")) {\n        $add.addClass(\"hide\");\n      }\n    }\n\n    // Restart the polling\n    this._pollComments();\n  }\n\n  /**\n   * Sets a timeout to poll new comments.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _pollComments() {\n    this._stopPolling();\n\n    this.pollTimeout = setTimeout(() => {\n      this._fetchComments();\n    }, this.pollingInterval);\n  }\n\n  /**\n   * Sends an ajax request based on current\n   * params to get comments for the component\n   * @private\n   * @param {Function} successCallback A callback that is called after a\n   *   successful fetch\n   * @returns {Void} - Returns nothing\n   */\n  _fetchComments(successCallback = null) {\n    Rails.ajax({\n      url: this.commentsUrl,\n      type: \"GET\",\n      data: new URLSearchParams({\n        \"commentable_gid\": this.commentableGid,\n        \"root_depth\": this.rootDepth,\n        \"order\": this.order,\n        \"after\": this.lastCommentId,\n        ...(this.toggleTranslations && { \"toggle_translations\": this.toggleTranslations }),\n        ...(this.lastCommentId && { \"after\": this.lastCommentId })\n      }),\n      success: () => {\n        if (successCallback) {\n          successCallback();\n        }\n        this._pollComments();\n      }\n    });\n  }\n\n  /**\n   * Stops polling for new comments.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _stopPolling() {\n    if (this.pollTimeout) {\n      clearTimeout(this.pollTimeout);\n    }\n  }\n\n  /**\n   * Sets the loading comments element visible in the view.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _setLoading() {\n    const $container = $(\"> .comments-container\", this.$element);\n    $(\"> .comments\", $container).addClass(\"hide\");\n    $(\"> .loading-comments\", $container).removeClass(\"hide\");\n  }\n\n  /**\n   * Event listener for the ordering links.\n   * @private\n   * @returns {Void} - Returns nothing\n   */\n  _onInitOrder() {\n    this._stopPolling();\n    this._setLoading();\n  }\n\n  /**\n   * Event listener for the opinion toggle buttons.\n   * @private\n   * @param {Event} ev - The event object.\n   * @returns {Void} - Returns nothing\n   */\n  _onToggleOpinion(ev) {\n    let $btn = $(ev.target);\n    if (!$btn.is(\".button\")) {\n      $btn = $btn.parents(\".button\");\n    }\n\n    const $add = $btn.closest(\".add-comment\");\n    const $form = $(\"form\", $add);\n    const $opinionButtons = $(\".opinion-toggle .button\", $add);\n    const $selectedState = $(\".opinion-toggle .selected-state\", $add);\n    const $alignment = $(\".alignment-input\", $form);\n\n    $opinionButtons.removeClass(\"is-active\").attr(\"aria-pressed\", \"false\");\n    $btn.addClass(\"is-active\").attr(\"aria-pressed\", \"true\");\n\n    if ($btn.is(\".opinion-toggle--ok\")) {\n      $alignment.val(1);\n    } else if ($btn.is(\".opinion-toggle--meh\")) {\n      $alignment.val(0);\n    } else if ($btn.is(\".opinion-toggle--ko\")) {\n      $alignment.val(-1);\n    }\n\n    // Announce the selected state for the screen reader\n    $selectedState.text($btn.data(\"selected-label\"));\n  }\n\n  /**\n   * Event listener for the comment field text input.\n   * @private\n   * @param {Event} ev - The event object.\n   * @returns {Void} - Returns nothing\n   */\n  _onTextInput(ev) {\n    const $text = $(ev.target);\n    const $add = $text.closest(\".add-comment\");\n    const $form = $(\"form\", $add);\n    const $submit = $(\"button[type='submit']\", $form);\n\n    if ($text.val().length > 0) {\n      $submit.removeAttr(\"disabled\");\n    } else {\n      $submit.attr(\"disabled\", \"disabled\");\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMA,CAAC,GAAGC,MAAM,CAACD,CAAC;AAElB,OAAOE,KAAK,MAAM,YAAY;AAE9B,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,yBAAyB,MAAM,qCAAqC;AAAA,IAEtDC,iBAAiB;EACpC,SAAAA,kBAAYC,QAAQ,EAAEC,MAAM,EAAE;IAAAC,eAAA,OAAAH,iBAAA;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,cAAc,GAAGF,MAAM,CAACE,cAAc;IAC3C,IAAI,CAACC,WAAW,GAAGH,MAAM,CAACG,WAAW;IACrC,IAAI,CAACC,SAAS,GAAGJ,MAAM,CAACI,SAAS;IACjC,IAAI,CAACC,KAAK,GAAGL,MAAM,CAACK,KAAK;IACzB,IAAI,CAACC,aAAa,GAAGN,MAAM,CAACM,aAAa;IACzC,IAAI,CAACC,eAAe,GAAGP,MAAM,CAACO,eAAe,IAAI,KAAK;IACtD,IAAI,CAACC,aAAa,GAAGR,MAAM,CAACQ,aAAa;IACzC,IAAI,CAACC,kBAAkB,GAAGT,MAAM,CAACS,kBAAkB;IACnD,IAAI,CAACC,EAAE,GAAG,IAAI,CAACX,QAAQ,CAACY,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAACC,OAAO,CAAC,CAAC;IACpD,IAAI,CAACC,OAAO,GAAG,KAAK;EACtB;;EAEA;AACF;AACA;AACA;AACA;EAJEC,YAAA,CAAAhB,iBAAA;IAAAiB,GAAA;IAAAC,KAAA,EAKA,SAAAC,eAAA,EAAiB;MAAA,IAAAC,KAAA;MACf,IAAI,IAAI,CAACnB,QAAQ,CAACoB,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACN,OAAO,EAAE;QAC7C,IAAI,CAACA,OAAO,GAAG,IAAI;QACnB,IAAI,CAACO,mBAAmB,CAAC,IAAI,CAACrB,QAAQ,CAAC;QACvC,IAAI,CAAC,IAAI,CAACS,aAAa,EAAE;UACvBhB,CAAC,CAAC,uBAAuB,EAAE,IAAI,CAACO,QAAQ,CAAC,CAACsB,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC;UAChE,IAAI,CAACC,cAAc,CAAC,YAAM;YACxB9B,CAAC,CAAC,uBAAuB,EAAE0B,KAAI,CAACnB,QAAQ,CAAC,CAACsB,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;UACnE,CAAC,CAAC;QACJ;QAEA7B,CAAC,CAAC,wCAAwC,EAAE,IAAI,CAACO,QAAQ,CAAC,CAACwB,EAAE,CAAC,wBAAwB,EAAE;UAAA,OAAML,KAAI,CAACM,YAAY,CAAC,CAAC;QAAA,EAAC;MACpH;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAT,GAAA;IAAAC,KAAA,EAKA,SAAAS,iBAAA,EAAmB;MAAA,IAAAC,MAAA;MACjB,IAAI,IAAI,CAACb,OAAO,EAAE;QAChB,IAAI,CAACA,OAAO,GAAG,KAAK;QACpB,IAAI,CAACc,YAAY,CAAC,CAAC;QAEnBnC,CAAC,CAAC,sCAAsC,EAAE,IAAI,CAACO,QAAQ,CAAC,CAAC6B,GAAG,CAAC,wBAAwB,CAAC;QACtFpC,CAAC,CAAC,uBAAuB,EAAE,IAAI,CAACO,QAAQ,CAAC,CAAC6B,GAAG,CAAC,wBAAwB,CAAC;QACvEpC,CAAC,CAAC,wCAAwC,EAAE,IAAI,CAACO,QAAQ,CAAC,CAAC6B,GAAG,CAAC,wBAAwB,CAAC;QACxFpC,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAACO,QAAQ,CAAC,CAAC6B,GAAG,CAAC,yBAAyB,CAAC;QACpEpC,CAAC,CAAC,uBAAuB,EAAE,IAAI,CAACO,QAAQ,CAAC,CAAC8B,IAAI,CAAC,UAACC,EAAE,EAAEC,EAAE;UAAA,OAAKA,EAAE,CAACC,mBAAmB,CAAC,aAAa,EAAEN,MAAI,CAACO,YAAY,CAAC;QAAA,EAAC;MACtH;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAlB,GAAA;IAAAC,KAAA,EAQA,SAAAkB,UAAUC,UAAU,EAA2B;MAAA,IAAzBC,eAAe,GAAAC,SAAA,CAAAlB,MAAA,QAAAkB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;MAC3C,IAAME,OAAO,GAAG/C,CAAC,CAAC,iBAAiB,EAAE,IAAI,CAACO,QAAQ,CAAC;MACnD,IAAMyC,QAAQ,GAAGhD,CAAC,CAAC2C,UAAU,CAAC;MAC9B,IAAMM,QAAQ,GAAGjD,CAAC,CAAC,kBAAkB,EAAE,IAAI,CAACO,QAAQ,CAAC;MACrD,IAAI,CAAC2C,WAAW,CAACD,QAAQ,EAAED,QAAQ,CAAC;MACpC,IAAI,CAACG,wBAAwB,CAACJ,OAAO,EAAEH,eAAe,CAAC;IACzD;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATE;IAAArB,GAAA;IAAAC,KAAA,EAUA,SAAA4B,SAASC,SAAS,EAAEC,SAAS,EAA2B;MAAA,IAAzBV,eAAe,GAAAC,SAAA,CAAAlB,MAAA,QAAAkB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;MACpD,IAAME,OAAO,GAAG/C,CAAC,aAAAuD,MAAA,CAAaF,SAAS,CAAE,CAAC;MAC1C,IAAML,QAAQ,GAAGhD,CAAC,CAACsD,SAAS,CAAC;MAC7B,IAAME,QAAQ,GAAGxD,CAAC,aAAAuD,MAAA,CAAaF,SAAS,aAAU,CAAC;MACnD,IAAI,CAACH,WAAW,CAACM,QAAQ,EAAER,QAAQ,CAAC;MACpCQ,QAAQ,CAACC,QAAQ,CAAC,2BAA2B,CAAC,CAACC,WAAW,CAAC,MAAM,CAAC;MAClE,IAAI,CAACP,wBAAwB,CAACJ,OAAO,EAAEH,eAAe,CAAC;IACzD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAArB,GAAA;IAAAC,KAAA,EAKA,SAAAJ,QAAA,EAAU;MACR,mBAAAmC,MAAA,CAAmB,IAAII,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,OAAAL,MAAA,CAAIM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC;IAC5F;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAxC,GAAA;IAAAC,KAAA,EAMA,SAAAI,oBAAoBmB,OAAO,EAAE;MAAA,IAAAiB,MAAA;MAC3BhE,CAAC,CAAC,cAAc,EAAE+C,OAAO,CAAC,CAACV,IAAI,CAAC,UAACC,EAAE,EAAEC,EAAE,EAAK;QAC1C,IAAM0B,IAAI,GAAGjE,CAAC,CAACuC,EAAE,CAAC;QAClB,IAAM2B,KAAK,GAAGlE,CAAC,CAAC,MAAM,EAAEiE,IAAI,CAAC;QAC7B,IAAME,eAAe,GAAGnE,CAAC,CAAC,yBAAyB,EAAEiE,IAAI,CAAC;QAC1D,IAAMG,KAAK,GAAGpE,CAAC,CAAC,UAAU,EAAEkE,KAAK,CAAC;QAElCC,eAAe,CAACpC,EAAE,CAAC,wBAAwB,EAAEiC,MAAI,CAACK,gBAAgB,CAAC;QACnED,KAAK,CAACrC,EAAE,CAAC,wBAAwB,EAAEiC,MAAI,CAACvB,YAAY,CAAC;QAErDzC,CAAC,CAACsE,QAAQ,CAAC,CAACC,OAAO,CAAC,yBAAyB,EAAE,CAACH,KAAK,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9DN,KAAK,CAACnC,EAAE,CAAC,yBAAyB,EAAE,YAAM;UACxC,IAAM0C,OAAO,GAAGzE,CAAC,CAAC,uBAAuB,EAAEkE,KAAK,CAAC;UAEjDO,OAAO,CAACtD,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC;UACpC6C,MAAI,CAAC7B,YAAY,CAAC,CAAC;QACrB,CAAC,CAAC;QAEF,IAAIiC,KAAK,CAACzC,MAAM,IAAIyC,KAAK,CAACI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;UACzC;UACAJ,KAAK,CAACI,GAAG,CAAC,CAAC,CAAC,CAACE,gBAAgB,CAAC,aAAa,EAAEV,MAAI,CAACvB,YAAY,CAAC;QACjE;MACF,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAlB,GAAA;IAAAC,KAAA,EAQA,SAAA0B,YAAYyB,OAAO,EAAEC,UAAU,EAAE;MAC/B,IAAI5B,QAAQ,GAAGhD,CAAC,CAAC,UAAU,EAAE4E,UAAU,CAAC;MACxC,IAAI5B,QAAQ,CAACrB,MAAM,GAAG,CAAC,EAAE;QACvB;QACAqB,QAAQ,GAAG4B,UAAU;MACvB;MACA,IAAI,CAAC9D,aAAa,GAAG+D,QAAQ,CAAC7B,QAAQ,CAAC8B,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;MAE9DH,OAAO,CAACI,MAAM,CAACH,UAAU,CAAC;MAC1BA,UAAU,CAACI,UAAU,CAAC,CAAC;MACvB,IAAI,CAACpD,mBAAmB,CAACgD,UAAU,CAAC;MACpCzE,sBAAsB,CAACH,CAAC,CAAC,uBAAuB,EAAE4E,UAAU,CAAC,CAAC;MAC9DA,UAAU,CAACK,IAAI,CAAC,oBAAoB,CAAC,CAAC5C,IAAI,CAAC,UAACC,EAAE,EAAE4C,IAAI,EAAK;QACvD,IAAMC,KAAK,GAAGnF,CAAC,CAACkF,IAAI,CAAC;QACrBC,KAAK,CAACL,IAAI,CAAC,eAAe,EAAE,IAAI1E,YAAY,CAAC+E,KAAK,CAAC,CAAC;MACtD,CAAC,CAAC;MACF9E,yBAAyB,CAACuE,UAAU,CAAC;IACvC;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAArD,GAAA;IAAAC,KAAA,EASA,SAAA2B,yBAAyBJ,OAAO,EAAEH,eAAe,EAAE;MACjD,IAAIA,eAAe,EAAE;QACnB,IAAMqB,IAAI,GAAGjE,CAAC,CAAC,gBAAgB,EAAE+C,OAAO,CAAC;QACzC,IAAMqB,KAAK,GAAGpE,CAAC,CAAC,UAAU,EAAEiE,IAAI,CAAC;QACjC,IAAMmB,gBAAgB,GAAGhB,KAAK,CAACU,IAAI,CAAC,8BAA8B,CAAC;QACnEV,KAAK,CAACiB,GAAG,CAAC,EAAE,CAAC;QACb,IAAID,gBAAgB,EAAE;UACpBA,gBAAgB,CAACE,YAAY,CAAC,CAAC;QACjC;QACA,IAAI,CAACrB,IAAI,CAACsB,MAAM,CAAC,CAAC,CAACC,EAAE,CAAC,WAAW,CAAC,EAAE;UAClCvB,IAAI,CAACwB,QAAQ,CAAC,MAAM,CAAC;QACvB;MACF;;MAEA;MACA,IAAI,CAACC,aAAa,CAAC,CAAC;IACtB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAnE,GAAA;IAAAC,KAAA,EAKA,SAAAkE,cAAA,EAAgB;MAAA,IAAAC,MAAA;MACd,IAAI,CAACxD,YAAY,CAAC,CAAC;MAEnB,IAAI,CAACyD,WAAW,GAAGC,UAAU,CAAC,YAAM;QAClCF,MAAI,CAAC7D,cAAc,CAAC,CAAC;MACvB,CAAC,EAAE,IAAI,CAACf,eAAe,CAAC;IAC1B;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAQ,GAAA;IAAAC,KAAA,EAQA,SAAAM,eAAA,EAAuC;MAAA,IAAAgE,MAAA;MAAA,IAAxBC,eAAe,GAAAlD,SAAA,CAAAlB,MAAA,QAAAkB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;MACnC3C,KAAK,CAAC8F,IAAI,CAAC;QACTC,GAAG,EAAE,IAAI,CAACtF,WAAW;QACrBuF,IAAI,EAAE,KAAK;QACXpB,IAAI,EAAE,IAAIqB,eAAe,CAAAC,aAAA,CAAAA,aAAA;UACvB,iBAAiB,EAAE,IAAI,CAAC1F,cAAc;UACtC,YAAY,EAAE,IAAI,CAACE,SAAS;UAC5B,OAAO,EAAE,IAAI,CAACC,KAAK;UACnB,OAAO,EAAE,IAAI,CAACC;QAAa,GACvB,IAAI,CAACG,kBAAkB,IAAI;UAAE,qBAAqB,EAAE,IAAI,CAACA;QAAmB,CAAC,GAC7E,IAAI,CAACH,aAAa,IAAI;UAAE,OAAO,EAAE,IAAI,CAACA;QAAc,CAAC,CAC1D,CAAC;QACFuF,OAAO,EAAE,SAAAA,QAAA,EAAM;UACb,IAAIN,eAAe,EAAE;YACnBA,eAAe,CAAC,CAAC;UACnB;UACAD,MAAI,CAACJ,aAAa,CAAC,CAAC;QACtB;MACF,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAnE,GAAA;IAAAC,KAAA,EAKA,SAAAW,aAAA,EAAe;MACb,IAAI,IAAI,CAACyD,WAAW,EAAE;QACpBU,YAAY,CAAC,IAAI,CAACV,WAAW,CAAC;MAChC;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAArE,GAAA;IAAAC,KAAA,EAKA,SAAA+E,YAAA,EAAc;MACZ,IAAM3B,UAAU,GAAG5E,CAAC,CAAC,uBAAuB,EAAE,IAAI,CAACO,QAAQ,CAAC;MAC5DP,CAAC,CAAC,aAAa,EAAE4E,UAAU,CAAC,CAACa,QAAQ,CAAC,MAAM,CAAC;MAC7CzF,CAAC,CAAC,qBAAqB,EAAE4E,UAAU,CAAC,CAAClB,WAAW,CAAC,MAAM,CAAC;IAC1D;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAnC,GAAA;IAAAC,KAAA,EAKA,SAAAQ,aAAA,EAAe;MACb,IAAI,CAACG,YAAY,CAAC,CAAC;MACnB,IAAI,CAACoE,WAAW,CAAC,CAAC;IACpB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAhF,GAAA;IAAAC,KAAA,EAMA,SAAA6C,iBAAiBmC,EAAE,EAAE;MACnB,IAAIC,IAAI,GAAGzG,CAAC,CAACwG,EAAE,CAACE,MAAM,CAAC;MACvB,IAAI,CAACD,IAAI,CAACjB,EAAE,CAAC,SAAS,CAAC,EAAE;QACvBiB,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC,SAAS,CAAC;MAChC;MAEA,IAAM1C,IAAI,GAAGwC,IAAI,CAACG,OAAO,CAAC,cAAc,CAAC;MACzC,IAAM1C,KAAK,GAAGlE,CAAC,CAAC,MAAM,EAAEiE,IAAI,CAAC;MAC7B,IAAME,eAAe,GAAGnE,CAAC,CAAC,yBAAyB,EAAEiE,IAAI,CAAC;MAC1D,IAAM4C,cAAc,GAAG7G,CAAC,CAAC,iCAAiC,EAAEiE,IAAI,CAAC;MACjE,IAAM6C,UAAU,GAAG9G,CAAC,CAAC,kBAAkB,EAAEkE,KAAK,CAAC;MAE/CC,eAAe,CAACT,WAAW,CAAC,WAAW,CAAC,CAACvC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC;MACtEsF,IAAI,CAAChB,QAAQ,CAAC,WAAW,CAAC,CAACtE,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC;MAEvD,IAAIsF,IAAI,CAACjB,EAAE,CAAC,qBAAqB,CAAC,EAAE;QAClCsB,UAAU,CAACzB,GAAG,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM,IAAIoB,IAAI,CAACjB,EAAE,CAAC,sBAAsB,CAAC,EAAE;QAC1CsB,UAAU,CAACzB,GAAG,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM,IAAIoB,IAAI,CAACjB,EAAE,CAAC,qBAAqB,CAAC,EAAE;QACzCsB,UAAU,CAACzB,GAAG,CAAC,CAAC,CAAC,CAAC;MACpB;;MAEA;MACAwB,cAAc,CAACE,IAAI,CAACN,IAAI,CAAC3B,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAClD;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAvD,GAAA;IAAAC,KAAA,EAMA,SAAAiB,aAAa+D,EAAE,EAAE;MACf,IAAMpC,KAAK,GAAGpE,CAAC,CAACwG,EAAE,CAACE,MAAM,CAAC;MAC1B,IAAMzC,IAAI,GAAGG,KAAK,CAACwC,OAAO,CAAC,cAAc,CAAC;MAC1C,IAAM1C,KAAK,GAAGlE,CAAC,CAAC,MAAM,EAAEiE,IAAI,CAAC;MAC7B,IAAMQ,OAAO,GAAGzE,CAAC,CAAC,uBAAuB,EAAEkE,KAAK,CAAC;MAEjD,IAAIE,KAAK,CAACiB,GAAG,CAAC,CAAC,CAAC1D,MAAM,GAAG,CAAC,EAAE;QAC1B8C,OAAO,CAACuC,UAAU,CAAC,UAAU,CAAC;MAChC,CAAC,MAAM;QACLvC,OAAO,CAACtD,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC;MACtC;IACF;EAAC;EAAA,OAAAb,iBAAA;AAAA;AAAA,SAnTkBA,iBAAiB,IAAA2G,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}