{"ast":null,"code":"import select from \"select\";\n\n/**\n * This provides functionality to add clipboard copy functionality to buttons\n * on the page. The element to be copied from has to be defined for the button\n * using a `data` attribute and the target element has to be a form input.\n *\n * Usage:\n *   1. Create the button:\n *     <button class=\"button\"\n *      data-clipboard-copy=\"#target-input-element\"\n *      data-clipboard-copy-label=\"Copied!\"\n *      data-clipboard-copy-message=\"The text was successfully copied to clipboard.\"\n *      aria-label=\"Copy the text to clipboard\">\n *        <%= icon \"clipboard\", role: \"presentation\", \"aria-hidden\": true %>\n *        Copy to clipboard\n *    </button>\n *\n *   2. Make sure the target element exists on the page:\n *     <input id=\"target-input-element\" type=\"text\" value=\"This text will be copied.\">\n *\n * Options through data attributes:\n * - `data-clipboard-copy` = The jQuery selector for the target input element\n *   where text will be copied from.\n * - `data-clipboard-copy-label` = The label that will be shown in the button\n *   after a succesful copy.\n * - `data-clipboard-copy-message` = The text that will be announced to screen\n *   readers after a successful copy.\n */\n\n// How long the \"copied\" text is shown in the copy element after successful\n// copy.\nvar CLIPBOARD_COPY_TIMEOUT = 5000;\n$(function () {\n  $(document).on(\"click\", \"[data-clipboard-copy]\", function (ev) {\n    var $el = $(ev.target);\n    if (!$el.data(\"clipboard-copy\") || $el.data(\"clipboard-copy\").length < 1) {\n      return;\n    }\n    var $input = $($el.data(\"clipboard-copy\"));\n    if ($input.length < 1 || !$input.is(\"input, textarea, select\")) {\n      return;\n    }\n\n    // Get the available text to clipboard.\n    var selectedText = select($input[0]);\n    if (!selectedText || selectedText.length < 1) {\n      return;\n    }\n\n    // Move the selected text to clipboard.\n    var $temp = $(\"<textarea>\".concat(selectedText, \"</textarea>\")).css({\n      width: 1,\n      height: 1\n    });\n    $el.after($temp);\n    $temp.select();\n    var copyDone = function copyDone() {\n      $temp.remove();\n      $el.focus();\n    };\n    try {\n      // document.execCommand is deprecated but the Clipboard API is not\n      // supported by IE (which unfortunately is still a thing).\n      if (!document.execCommand(\"copy\")) {\n        return;\n      }\n    } catch (err) {\n      copyDone();\n      return;\n    }\n    copyDone();\n\n    // Change the label to indicate the copying was successful.\n    var label = $el.data(\"clipboard-copy-label\");\n    if (label) {\n      var to = $el.data(\"clipboard-copy-label-timeout\");\n      if (to) {\n        clearTimeout(to);\n      }\n      if (!$el.data(\"clipboard-copy-label-original\")) {\n        $el.data(\"clipboard-copy-label-original\", $el.html());\n      }\n      $el.html(label);\n      to = setTimeout(function () {\n        $el.html($el.data(\"clipboard-copy-label-original\"));\n        $el.removeData(\"clipboard-copy-label-original\");\n        $el.removeData(\"clipboard-copy-label-timeout\");\n      }, CLIPBOARD_COPY_TIMEOUT);\n      $el.data(\"clipboard-copy-label-timeout\", to);\n    }\n\n    // Alert the screen reader what just happened (the link was copied).\n    var message = $el.data(\"clipboard-copy-message\");\n    if (message) {\n      var $msg = $el.data(\"clipboard-message-element\");\n      if ($msg) {\n        if ($msg.html() === message) {\n          // Try to hint the screen reader to re-read the text in the message\n          // element.\n          message += \"&nbsp;\";\n        }\n      } else {\n        $msg = $('<div aria-role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" class=\"clipboard-announcement show-for-sr\"></div>');\n        $el.after($msg);\n        $el.data(\"clipboard-message-element\", $msg);\n      }\n\n      // Add the non breaking space always to content to try to force the\n      // screen reader to reannounce the added text.\n      $msg.html(message);\n    }\n  });\n});","map":{"version":3,"names":["select","CLIPBOARD_COPY_TIMEOUT","$","document","on","ev","$el","target","data","length","$input","is","selectedText","$temp","concat","css","width","height","after","copyDone","remove","focus","execCommand","err","label","to","clearTimeout","html","setTimeout","removeData","message","$msg"],"sources":["/home/nico/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-core-0.27.3/app/packs/src/decidim/clipboard.js"],"sourcesContent":["import select from \"select\";\n\n/**\n * This provides functionality to add clipboard copy functionality to buttons\n * on the page. The element to be copied from has to be defined for the button\n * using a `data` attribute and the target element has to be a form input.\n *\n * Usage:\n *   1. Create the button:\n *     <button class=\"button\"\n *      data-clipboard-copy=\"#target-input-element\"\n *      data-clipboard-copy-label=\"Copied!\"\n *      data-clipboard-copy-message=\"The text was successfully copied to clipboard.\"\n *      aria-label=\"Copy the text to clipboard\">\n *        <%= icon \"clipboard\", role: \"presentation\", \"aria-hidden\": true %>\n *        Copy to clipboard\n *    </button>\n *\n *   2. Make sure the target element exists on the page:\n *     <input id=\"target-input-element\" type=\"text\" value=\"This text will be copied.\">\n *\n * Options through data attributes:\n * - `data-clipboard-copy` = The jQuery selector for the target input element\n *   where text will be copied from.\n * - `data-clipboard-copy-label` = The label that will be shown in the button\n *   after a succesful copy.\n * - `data-clipboard-copy-message` = The text that will be announced to screen\n *   readers after a successful copy.\n */\n\n// How long the \"copied\" text is shown in the copy element after successful\n// copy.\nconst CLIPBOARD_COPY_TIMEOUT = 5000;\n\n$(() => {\n  $(document).on(\"click\", \"[data-clipboard-copy]\", (ev) => {\n    const $el = $(ev.target);\n    if (!$el.data(\"clipboard-copy\") || $el.data(\"clipboard-copy\").length < 1) {\n      return;\n    }\n\n    const $input = $($el.data(\"clipboard-copy\"));\n    if ($input.length < 1 || !$input.is(\"input, textarea, select\")) {\n      return;\n    }\n\n    // Get the available text to clipboard.\n    const selectedText = select($input[0]);\n    if (!selectedText || selectedText.length < 1) {\n      return;\n    }\n\n    // Move the selected text to clipboard.\n    const $temp = $(`<textarea>${selectedText}</textarea>`).css({\n      width: 1,\n      height: 1\n    });\n    $el.after($temp);\n    $temp.select();\n\n    const copyDone = () => {\n      $temp.remove();\n      $el.focus();\n    };\n    try {\n      // document.execCommand is deprecated but the Clipboard API is not\n      // supported by IE (which unfortunately is still a thing).\n      if (!document.execCommand(\"copy\")) {\n        return;\n      }\n    } catch (err) {\n      copyDone();\n      return;\n    }\n    copyDone();\n\n    // Change the label to indicate the copying was successful.\n    const label = $el.data(\"clipboard-copy-label\");\n    if (label) {\n      let to = $el.data(\"clipboard-copy-label-timeout\");\n      if (to) {\n        clearTimeout(to);\n      }\n\n      if (!$el.data(\"clipboard-copy-label-original\")) {\n        $el.data(\"clipboard-copy-label-original\", $el.html());\n      }\n\n      $el.html(label);\n      to = setTimeout(() => {\n        $el.html($el.data(\"clipboard-copy-label-original\"));\n        $el.removeData(\"clipboard-copy-label-original\");\n        $el.removeData(\"clipboard-copy-label-timeout\");\n      }, CLIPBOARD_COPY_TIMEOUT);\n      $el.data(\"clipboard-copy-label-timeout\", to)\n    }\n\n    // Alert the screen reader what just happened (the link was copied).\n    let message = $el.data(\"clipboard-copy-message\");\n    if (message) {\n      let $msg = $el.data(\"clipboard-message-element\");\n      if ($msg) {\n        if ($msg.html() === message) {\n          // Try to hint the screen reader to re-read the text in the message\n          // element.\n          message += \"&nbsp;\";\n        }\n      } else {\n        $msg = $('<div aria-role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" class=\"clipboard-announcement show-for-sr\"></div>');\n        $el.after($msg);\n        $el.data(\"clipboard-message-element\", $msg);\n      }\n\n      // Add the non breaking space always to content to try to force the\n      // screen reader to reannounce the added text.\n      $msg.html(message);\n    }\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}